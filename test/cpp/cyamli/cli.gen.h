// Code generated by cyamli, DO NOT EDIT.
#pragma once
#include <string>
#include <vector>
#include <cstdint>

namespace cyamli {


struct Input {
    bool Opt_Help;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_Generate {
    bool Opt_Help;
    std::string Opt_OutPath;
    std::string Opt_SchemaPath;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_GenerateDart3 {
    bool Opt_Help;
    std::string Opt_OutPath;
    std::string Opt_SchemaPath;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_GenerateDocs {
    std::string Opt_Format;
    bool Opt_Help;
    std::string Opt_OutPath;
    std::string Opt_SchemaPath;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_GenerateGolang {
    bool Opt_Help;
    std::string Opt_OutPath;
    std::string Opt_Package;
    std::string Opt_SchemaPath;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_GenerateKotlin {
    bool Opt_Help;
    std::string Opt_OutPath;
    std::string Opt_Package;
    std::string Opt_SchemaPath;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_GeneratePython3 {
    bool Opt_Help;
    std::string Opt_OutPath;
    std::string Opt_SchemaPath;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_GenerateTypescript {
    bool Opt_Help;
    std::string Opt_OutPath;
    std::string Opt_SchemaPath;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_Version {
    bool Opt_Help;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};


std::string GetVersion();
std::string GetProgram();
std::string GetDoc(std::vector<std::string> const &subcommands);

class CLIHandler {
public:
    virtual ~CLIHandler() = default;
    virtual void Run(Input const &input) = 0;
    virtual void Run_Generate(Input_Generate const &input) = 0;
    virtual void Run_GenerateDart3(Input_GenerateDart3 const &input) = 0;
    virtual void Run_GenerateDocs(Input_GenerateDocs const &input) = 0;
    virtual void Run_GenerateGolang(Input_GenerateGolang const &input) = 0;
    virtual void Run_GenerateKotlin(Input_GenerateKotlin const &input) = 0;
    virtual void Run_GeneratePython3(Input_GeneratePython3 const &input) = 0;
    virtual void Run_GenerateTypescript(Input_GenerateTypescript const &input) = 0;
    virtual void Run_Version(Input_Version const &input) = 0;
    
};

void Run(CLIHandler &handler, int argc, const char *argv[]);

} // namespace
