// Code generated by cyamli, DO NOT EDIT.
#pragma once
#include <string>
#include <vector>
#include <cstdint>

namespace demo {


struct Input {
    std::string Opt_Config;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_Data {
    std::string Opt_Config;
    std::string Opt_Where;
    
    std::string Arg_Table;
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_Schema {
    std::string Opt_Config;
    
    std::string Arg_Table;
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_Tables {
    std::string Opt_Config;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};


std::string GetVersion();
std::string GetProgram();
std::string GetDoc(std::vector<std::string> const &subcommands);

class CLIHandler {
public:
    virtual ~CLIHandler() = default;
    virtual void Run(Input const &input) = 0;
    virtual void Run_Data(Input_Data const &input) = 0;
    virtual void Run_Schema(Input_Schema const &input) = 0;
    virtual void Run_Tables(Input_Tables const &input) = 0;
    
};

void Run(CLIHandler &handler, int argc, const char *argv[]);

} // namespace
