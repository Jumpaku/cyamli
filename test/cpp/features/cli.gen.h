// Code generated by cyamli, DO NOT EDIT.
#pragma once
#include <string>
#include <vector>
#include <cstdint>

namespace features {


struct Input {
    bool Opt_NegationOption;
    std::int64_t Opt_Option;
    std::string Opt_PropagationOption;
    std::string Opt_RepeatableOption;
    
    bool Arg_FirstArg;
    std::int64_t Arg_SecondArg;
    std::vector<std::string> Arg_ThirdArg;
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_Sub1 {
    std::string Opt_PropagationOption;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_Sub1Sub2 {
    std::string Opt_PropagationOption;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};

struct Input_Sub1Sub2Sub3 {
    std::string Opt_PropagationOption;
    
    
    std::vector<std::string> Subcommand;
    std::vector<std::string> Options;
    std::vector<std::string> Arguments;
    std::string ErrorMessage;
    void resolveInput(std::vector<std::string> const &subcommand, std::vector<std::string> const &options, std::vector<std::string> const &arguments);
};


std::string GetVersion();
std::string GetProgram();
std::string GetDoc(std::vector<std::string> const &subcommands);

class CLIHandler {
public:
    virtual ~CLIHandler() = default;
    virtual void Run(Input const &input) = 0;
    virtual void Run_Sub1(Input_Sub1 const &input) = 0;
    virtual void Run_Sub1Sub2(Input_Sub1Sub2 const &input) = 0;
    virtual void Run_Sub1Sub2Sub3(Input_Sub1Sub2Sub3 const &input) = 0;
    
};

void Run(CLIHandler &handler, int argc, const char *argv[]);

} // namespace
