// Code generated by cyamli, DO NOT EDIT.
using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;
using cyamli;

namespace cyamli.Tests {

public class CliHandlerMock : ICliHandler {
    public object? GotInput { get; set; }
    public void Run(Cli.Input input) {
        GotInput = input;
    }
    public void Run_Generate(Cli.Input_Generate input) {
        GotInput = input;
    }
    public void Run_GenerateDart3(Cli.Input_GenerateDart3 input) {
        GotInput = input;
    }
    public void Run_GenerateDocs(Cli.Input_GenerateDocs input) {
        GotInput = input;
    }
    public void Run_GenerateGolang(Cli.Input_GenerateGolang input) {
        GotInput = input;
    }
    public void Run_GenerateKotlin(Cli.Input_GenerateKotlin input) {
        GotInput = input;
    }
    public void Run_GeneratePython3(Cli.Input_GeneratePython3 input) {
        GotInput = input;
    }
    public void Run_GenerateTypescript(Cli.Input_GenerateTypescript input) {
        GotInput = input;
    }
    public void Run_Version(Cli.Input_Version input) {
        GotInput = input;
    }
    
}

[TestFixture]
public class RunTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "-help=0","--", },
                WantInput = new Cli.Input {
                    Opt_Help = false,
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "--", },
                WantInput = new Cli.Input {
                    Opt_Help = false,
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "-h=0","--", },
                WantInput = new Cli.Input {
                    Opt_Help = false,
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "-help=0","--", },
                WantInput = new Cli.Input {
                    Opt_Help = false,
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "-help=0","--", },
                WantInput = new Cli.Input {
                    Opt_Help = false,
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "-help=0","--", },
                WantInput = new Cli.Input {
                    Opt_Help = false,
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Help, Is.EqualTo(want.Opt_Help), $"{tc.Name}: unexpected input for option: -help");
        
        
    }
}
[TestFixture]
public class Run_GenerateTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_Generate WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "generate", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_Generate {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "generate", "--", },
                WantInput = new Cli.Input_Generate {
                    Opt_Help = false,
                    Opt_OutPath = "",
                    Opt_SchemaPath = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "generate", "-h=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_Generate {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "generate", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_Generate {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "generate", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_Generate {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "generate", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_Generate {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_Generate)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Help, Is.EqualTo(want.Opt_Help), $"{tc.Name}: unexpected input for option: -help");
        
        Assert.That(got.Opt_OutPath, Is.EqualTo(want.Opt_OutPath), $"{tc.Name}: unexpected input for option: -out-path");
        
        Assert.That(got.Opt_SchemaPath, Is.EqualTo(want.Opt_SchemaPath), $"{tc.Name}: unexpected input for option: -schema-path");
        
        
    }
}
[TestFixture]
public class Run_GenerateDart3Tests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_GenerateDart3 WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "generate", "dart3", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateDart3 {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "generate", "dart3", "--", },
                WantInput = new Cli.Input_GenerateDart3 {
                    Opt_Help = false,
                    Opt_OutPath = "",
                    Opt_SchemaPath = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "generate", "dart3", "-h=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateDart3 {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "generate", "dart3", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateDart3 {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "generate", "dart3", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateDart3 {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "generate", "dart3", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateDart3 {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_GenerateDart3)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Help, Is.EqualTo(want.Opt_Help), $"{tc.Name}: unexpected input for option: -help");
        
        Assert.That(got.Opt_OutPath, Is.EqualTo(want.Opt_OutPath), $"{tc.Name}: unexpected input for option: -out-path");
        
        Assert.That(got.Opt_SchemaPath, Is.EqualTo(want.Opt_SchemaPath), $"{tc.Name}: unexpected input for option: -schema-path");
        
        
    }
}
[TestFixture]
public class Run_GenerateDocsTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_GenerateDocs WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "generate", "docs", "-format=0","-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateDocs {
                    Opt_Format = "0",
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "generate", "docs", "--", },
                WantInput = new Cli.Input_GenerateDocs {
                    Opt_Format = "text",
                    Opt_Help = false,
                    Opt_OutPath = "",
                    Opt_SchemaPath = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "generate", "docs", "-f=0","-h=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateDocs {
                    Opt_Format = "0",
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "generate", "docs", "-format=0","-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateDocs {
                    Opt_Format = "0",
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "generate", "docs", "-format=0","-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateDocs {
                    Opt_Format = "0",
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "generate", "docs", "-format=0","-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateDocs {
                    Opt_Format = "0",
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_GenerateDocs)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Format, Is.EqualTo(want.Opt_Format), $"{tc.Name}: unexpected input for option: -format");
        
        Assert.That(got.Opt_Help, Is.EqualTo(want.Opt_Help), $"{tc.Name}: unexpected input for option: -help");
        
        Assert.That(got.Opt_OutPath, Is.EqualTo(want.Opt_OutPath), $"{tc.Name}: unexpected input for option: -out-path");
        
        Assert.That(got.Opt_SchemaPath, Is.EqualTo(want.Opt_SchemaPath), $"{tc.Name}: unexpected input for option: -schema-path");
        
        
    }
}
[TestFixture]
public class Run_GenerateGolangTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_GenerateGolang WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "generate", "golang", "-help=0","-out-path=0","-package=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateGolang {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_Package = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "generate", "golang", "--", },
                WantInput = new Cli.Input_GenerateGolang {
                    Opt_Help = false,
                    Opt_OutPath = "",
                    Opt_Package = "main",
                    Opt_SchemaPath = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "generate", "golang", "-h=0","-out-path=0","-package=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateGolang {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_Package = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "generate", "golang", "-help=0","-out-path=0","-package=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateGolang {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_Package = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "generate", "golang", "-help=0","-out-path=0","-package=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateGolang {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_Package = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "generate", "golang", "-help=0","-out-path=0","-package=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateGolang {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_Package = "0",
                    Opt_SchemaPath = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_GenerateGolang)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Help, Is.EqualTo(want.Opt_Help), $"{tc.Name}: unexpected input for option: -help");
        
        Assert.That(got.Opt_OutPath, Is.EqualTo(want.Opt_OutPath), $"{tc.Name}: unexpected input for option: -out-path");
        
        Assert.That(got.Opt_Package, Is.EqualTo(want.Opt_Package), $"{tc.Name}: unexpected input for option: -package");
        
        Assert.That(got.Opt_SchemaPath, Is.EqualTo(want.Opt_SchemaPath), $"{tc.Name}: unexpected input for option: -schema-path");
        
        
    }
}
[TestFixture]
public class Run_GenerateKotlinTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_GenerateKotlin WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "generate", "kotlin", "-help=0","-out-path=0","-package=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateKotlin {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_Package = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "generate", "kotlin", "--", },
                WantInput = new Cli.Input_GenerateKotlin {
                    Opt_Help = false,
                    Opt_OutPath = "",
                    Opt_Package = "",
                    Opt_SchemaPath = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "generate", "kotlin", "-h=0","-out-path=0","-package=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateKotlin {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_Package = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "generate", "kotlin", "-help=0","-out-path=0","-package=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateKotlin {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_Package = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "generate", "kotlin", "-help=0","-out-path=0","-package=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateKotlin {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_Package = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "generate", "kotlin", "-help=0","-out-path=0","-package=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateKotlin {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_Package = "0",
                    Opt_SchemaPath = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_GenerateKotlin)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Help, Is.EqualTo(want.Opt_Help), $"{tc.Name}: unexpected input for option: -help");
        
        Assert.That(got.Opt_OutPath, Is.EqualTo(want.Opt_OutPath), $"{tc.Name}: unexpected input for option: -out-path");
        
        Assert.That(got.Opt_Package, Is.EqualTo(want.Opt_Package), $"{tc.Name}: unexpected input for option: -package");
        
        Assert.That(got.Opt_SchemaPath, Is.EqualTo(want.Opt_SchemaPath), $"{tc.Name}: unexpected input for option: -schema-path");
        
        
    }
}
[TestFixture]
public class Run_GeneratePython3Tests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_GeneratePython3 WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "generate", "python3", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GeneratePython3 {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "generate", "python3", "--", },
                WantInput = new Cli.Input_GeneratePython3 {
                    Opt_Help = false,
                    Opt_OutPath = "",
                    Opt_SchemaPath = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "generate", "python3", "-h=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GeneratePython3 {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "generate", "python3", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GeneratePython3 {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "generate", "python3", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GeneratePython3 {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "generate", "python3", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GeneratePython3 {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_GeneratePython3)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Help, Is.EqualTo(want.Opt_Help), $"{tc.Name}: unexpected input for option: -help");
        
        Assert.That(got.Opt_OutPath, Is.EqualTo(want.Opt_OutPath), $"{tc.Name}: unexpected input for option: -out-path");
        
        Assert.That(got.Opt_SchemaPath, Is.EqualTo(want.Opt_SchemaPath), $"{tc.Name}: unexpected input for option: -schema-path");
        
        
    }
}
[TestFixture]
public class Run_GenerateTypescriptTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_GenerateTypescript WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "generate", "typescript", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateTypescript {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "generate", "typescript", "--", },
                WantInput = new Cli.Input_GenerateTypescript {
                    Opt_Help = false,
                    Opt_OutPath = "",
                    Opt_SchemaPath = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "generate", "typescript", "-h=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateTypescript {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "generate", "typescript", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateTypescript {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "generate", "typescript", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateTypescript {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "generate", "typescript", "-help=0","-out-path=0","-schema-path=0","--", },
                WantInput = new Cli.Input_GenerateTypescript {
                    Opt_Help = false,
                    Opt_OutPath = "0",
                    Opt_SchemaPath = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_GenerateTypescript)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Help, Is.EqualTo(want.Opt_Help), $"{tc.Name}: unexpected input for option: -help");
        
        Assert.That(got.Opt_OutPath, Is.EqualTo(want.Opt_OutPath), $"{tc.Name}: unexpected input for option: -out-path");
        
        Assert.That(got.Opt_SchemaPath, Is.EqualTo(want.Opt_SchemaPath), $"{tc.Name}: unexpected input for option: -schema-path");
        
        
    }
}
[TestFixture]
public class Run_VersionTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_Version WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "version", "-help=0","--", },
                WantInput = new Cli.Input_Version {
                    Opt_Help = false,
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "version", "--", },
                WantInput = new Cli.Input_Version {
                    Opt_Help = false,
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "version", "-h=0","--", },
                WantInput = new Cli.Input_Version {
                    Opt_Help = false,
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "version", "-help=0","--", },
                WantInput = new Cli.Input_Version {
                    Opt_Help = false,
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "version", "-help=0","--", },
                WantInput = new Cli.Input_Version {
                    Opt_Help = false,
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "version", "-help=0","--", },
                WantInput = new Cli.Input_Version {
                    Opt_Help = false,
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_Version)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Help, Is.EqualTo(want.Opt_Help), $"{tc.Name}: unexpected input for option: -help");
        
        
    }
}


} // namespace

