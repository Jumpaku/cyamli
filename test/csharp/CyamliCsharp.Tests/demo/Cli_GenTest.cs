// Code generated by cyamli, DO NOT EDIT.
using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;
using demo;

namespace demo.Tests {

public class CliHandlerMock : ICliHandler {
    public object? GotInput { get; set; }
    public void Run(Cli.Input input) {
        GotInput = input;
    }
    public void Run_Data(Cli.Input_Data input) {
        GotInput = input;
    }
    public void Run_Schema(Cli.Input_Schema input) {
        GotInput = input;
    }
    public void Run_Tables(Cli.Input_Tables input) {
        GotInput = input;
    }
    
}

[TestFixture]
public class RunTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "-config=0","--", },
                WantInput = new Cli.Input {
                    Opt_Config = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "--", },
                WantInput = new Cli.Input {
                    Opt_Config = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "-config=0","--", },
                WantInput = new Cli.Input {
                    Opt_Config = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "-config=0","--", },
                WantInput = new Cli.Input {
                    Opt_Config = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "-config=0","--", },
                WantInput = new Cli.Input {
                    Opt_Config = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "-config=0","--", },
                WantInput = new Cli.Input {
                    Opt_Config = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Config, Is.EqualTo(want.Opt_Config), $"{tc.Name}: unexpected input for option: -config");
        
        
    }
}
[TestFixture]
public class Run_DataTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_Data WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "data", "-config=0","-where=0","--","0", },
                WantInput = new Cli.Input_Data {
                    Opt_Config = "0",
                    Opt_Where = "0",
                    Arg_Table = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "data", "--","0", },
                WantInput = new Cli.Input_Data {
                    Opt_Config = "",
                    Opt_Where = "",
                    Arg_Table = "0",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "data", "-config=0","-where=0","--","0", },
                WantInput = new Cli.Input_Data {
                    Opt_Config = "0",
                    Opt_Where = "0",
                    Arg_Table = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "data", "-config=0","-where=0","--","0", },
                WantInput = new Cli.Input_Data {
                    Opt_Config = "0",
                    Opt_Where = "0",
                    Arg_Table = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "data", "-config=0","-where=0","--","0", },
                WantInput = new Cli.Input_Data {
                    Opt_Config = "0",
                    Opt_Where = "0",
                    Arg_Table = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "data", "-config=0","-where=0","--","0", },
                WantInput = new Cli.Input_Data {
                    Opt_Config = "0",
                    Opt_Where = "0",
                    Arg_Table = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_Data)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Config, Is.EqualTo(want.Opt_Config), $"{tc.Name}: unexpected input for option: -config");
        
        Assert.That(got.Opt_Where, Is.EqualTo(want.Opt_Where), $"{tc.Name}: unexpected input for option: -where");
        
        
        Assert.That(got.Arg_Table, Is.EqualTo(want.Arg_Table), $"{tc.Name}: unexpected input for argument: table");
        
    }
}
[TestFixture]
public class Run_SchemaTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_Schema WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "schema", "-config=0","--","0", },
                WantInput = new Cli.Input_Schema {
                    Opt_Config = "0",
                    Arg_Table = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "schema", "--","0", },
                WantInput = new Cli.Input_Schema {
                    Opt_Config = "",
                    Arg_Table = "0",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "schema", "-config=0","--","0", },
                WantInput = new Cli.Input_Schema {
                    Opt_Config = "0",
                    Arg_Table = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "schema", "-config=0","--","0", },
                WantInput = new Cli.Input_Schema {
                    Opt_Config = "0",
                    Arg_Table = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "schema", "-config=0","--","0", },
                WantInput = new Cli.Input_Schema {
                    Opt_Config = "0",
                    Arg_Table = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "schema", "-config=0","--","0", },
                WantInput = new Cli.Input_Schema {
                    Opt_Config = "0",
                    Arg_Table = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_Schema)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Config, Is.EqualTo(want.Opt_Config), $"{tc.Name}: unexpected input for option: -config");
        
        
        Assert.That(got.Arg_Table, Is.EqualTo(want.Arg_Table), $"{tc.Name}: unexpected input for argument: table");
        
    }
}
[TestFixture]
public class Run_TablesTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_Tables WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "tables", "-config=0","--", },
                WantInput = new Cli.Input_Tables {
                    Opt_Config = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "tables", "--", },
                WantInput = new Cli.Input_Tables {
                    Opt_Config = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "tables", "-config=0","--", },
                WantInput = new Cli.Input_Tables {
                    Opt_Config = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "tables", "-config=0","--", },
                WantInput = new Cli.Input_Tables {
                    Opt_Config = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "tables", "-config=0","--", },
                WantInput = new Cli.Input_Tables {
                    Opt_Config = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "tables", "-config=0","--", },
                WantInput = new Cli.Input_Tables {
                    Opt_Config = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_Tables)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_Config, Is.EqualTo(want.Opt_Config), $"{tc.Name}: unexpected input for option: -config");
        
        
    }
}


} // namespace

