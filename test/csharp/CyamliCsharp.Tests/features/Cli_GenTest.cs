// Code generated by cyamli, DO NOT EDIT.
using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;
using features;

namespace features.Tests {

public class CliHandlerMock : ICliHandler {
    public object? GotInput { get; set; }
    public void Run(Cli.Input input) {
        GotInput = input;
    }
    public void Run_Sub1(Cli.Input_Sub1 input) {
        GotInput = input;
    }
    public void Run_Sub1Sub2(Cli.Input_Sub1Sub2 input) {
        GotInput = input;
    }
    public void Run_Sub1Sub2Sub3(Cli.Input_Sub1Sub2Sub3 input) {
        GotInput = input;
    }
    
}

[TestFixture]
public class RunTests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "-negation-option=0","-option=0","-propagation-option=0","-repeatable-option=0","--","0","0","0", },
                WantInput = new Cli.Input {
                    Opt_NegationOption = false,
                    Opt_Option = 0L,
                    Opt_PropagationOption = "0",
                    Opt_RepeatableOption = "0",
                    Arg_FirstArg = false,
                    Arg_SecondArg = 0L,
                    Arg_ThirdArg = new List<string>{"0"},
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "--","0","0","0", },
                WantInput = new Cli.Input {
                    Opt_NegationOption = false,
                    Opt_Option = 123L,
                    Opt_PropagationOption = "",
                    Opt_RepeatableOption = "",
                    Arg_FirstArg = false,
                    Arg_SecondArg = 0L,
                    Arg_ThirdArg = new List<string>{"0"},
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "-negation-option=0","-o=0","-propagation-option=0","-repeatable-option=0","--","0","0","0", },
                WantInput = new Cli.Input {
                    Opt_NegationOption = false,
                    Opt_Option = 0L,
                    Opt_PropagationOption = "0",
                    Opt_RepeatableOption = "0",
                    Arg_FirstArg = false,
                    Arg_SecondArg = 0L,
                    Arg_ThirdArg = new List<string>{"0"},
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "-no-negation-option=1","-option=0","-propagation-option=0","-repeatable-option=0","--","0","0","0", },
                WantInput = new Cli.Input {
                    Opt_NegationOption = false,
                    Opt_Option = 0L,
                    Opt_PropagationOption = "0",
                    Opt_RepeatableOption = "0",
                    Arg_FirstArg = false,
                    Arg_SecondArg = 0L,
                    Arg_ThirdArg = new List<string>{"0"},
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "-no-negation-option=1","-option=0","-propagation-option=0","-repeatable-option=0","--","0","0", },
                WantInput = new Cli.Input {
                    Opt_NegationOption = false,
                    Opt_Option = 0L,
                    Opt_PropagationOption = "0",
                    Opt_RepeatableOption = "0",
                    Arg_FirstArg = false,
                    Arg_SecondArg = 0L,
                    Arg_ThirdArg = new List<string>(),
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "-no-negation-option=1","-option=0","-propagation-option=0","-repeatable-option=0","--","0","0","0", "0", },
                WantInput = new Cli.Input {
                    Opt_NegationOption = false,
                    Opt_Option = 0L,
                    Opt_PropagationOption = "0",
                    Opt_RepeatableOption = "0",
                    Arg_FirstArg = false,
                    Arg_SecondArg = 0L,
                    Arg_ThirdArg = new List<string>{"0", "0"},
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_NegationOption, Is.EqualTo(want.Opt_NegationOption), $"{tc.Name}: unexpected input for option: -negation-option");
        
        Assert.That(got.Opt_Option, Is.EqualTo(want.Opt_Option), $"{tc.Name}: unexpected input for option: -option");
        
        Assert.That(got.Opt_PropagationOption, Is.EqualTo(want.Opt_PropagationOption), $"{tc.Name}: unexpected input for option: -propagation-option");
        
        Assert.That(got.Opt_RepeatableOption, Is.EqualTo(want.Opt_RepeatableOption), $"{tc.Name}: unexpected input for option: -repeatable-option");
        
        
        Assert.That(got.Arg_FirstArg, Is.EqualTo(want.Arg_FirstArg), $"{tc.Name}: unexpected input for argument: first_arg");
        
        Assert.That(got.Arg_SecondArg, Is.EqualTo(want.Arg_SecondArg), $"{tc.Name}: unexpected input for argument: second_arg");
        
        Assert.That(got.Arg_ThirdArg, Is.EqualTo(want.Arg_ThirdArg), $"{tc.Name}: unexpected input for argument: third_arg");
        
    }
}
[TestFixture]
public class Run_Sub1Tests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_Sub1 WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "sub1", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "sub1", "--", },
                WantInput = new Cli.Input_Sub1 {
                    Opt_PropagationOption = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "sub1", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "sub1", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "sub1", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "sub1", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1 {
                    Opt_PropagationOption = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_Sub1)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_PropagationOption, Is.EqualTo(want.Opt_PropagationOption), $"{tc.Name}: unexpected input for option: -propagation-option");
        
        
    }
}
[TestFixture]
public class Run_Sub1Sub2Tests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_Sub1Sub2 WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "sub1", "sub2", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1Sub2 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "sub1", "sub2", "--", },
                WantInput = new Cli.Input_Sub1Sub2 {
                    Opt_PropagationOption = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "sub1", "sub2", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1Sub2 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "sub1", "sub2", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1Sub2 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "sub1", "sub2", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1Sub2 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "sub1", "sub2", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1Sub2 {
                    Opt_PropagationOption = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_Sub1Sub2)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_PropagationOption, Is.EqualTo(want.Opt_PropagationOption), $"{tc.Name}: unexpected input for option: -propagation-option");
        
        
    }
}
[TestFixture]
public class Run_Sub1Sub2Sub3Tests {
    public class TestCase {
        public required string Name { get; set; }
        public required string[] Args { get; set; }
        public required Cli.Input_Sub1Sub2Sub3 WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", "sub1", "sub2", "sub3", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1Sub2Sub3 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", "sub1", "sub2", "sub3", "--", },
                WantInput = new Cli.Input_Sub1Sub2Sub3 {
                    Opt_PropagationOption = "",
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", "sub1", "sub2", "sub3", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1Sub2Sub3 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", "sub1", "sub2", "sub3", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1Sub2Sub3 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", "sub1", "sub2", "sub3", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1Sub2Sub3 {
                    Opt_PropagationOption = "0",
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", "sub1", "sub2", "sub3", "-propagation-option=0","--", },
                WantInput = new Cli.Input_Sub1Sub2Sub3 {
                    Opt_PropagationOption = "0",
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CliHandlerMock();
        Cli.Run(mock, tc.Args);
        var got = (mock.GotInput as Cli.Input_Sub1Sub2Sub3)!;
        var want = tc.WantInput;
        
        Assert.That(got.Opt_PropagationOption, Is.EqualTo(want.Opt_PropagationOption), $"{tc.Name}: unexpected input for option: -propagation-option");
        
        
    }
}


} // namespace

