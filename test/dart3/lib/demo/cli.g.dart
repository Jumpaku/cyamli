// Code generated by cyamli, DO NOT EDIT.
// ignore_for_file: non_constant_identifier_names

/// Interface for CLI handlers
abstract class CLIHandler {
  Future<void> Run(Input input);
  Future<void> Run_Data(Input_Data input);
  Future<void> Run_Schema(Input_Schema input);
  Future<void> Run_Tables(Input_Tables input);
}

/// Entry point for the CLI application
Future<void> run(CLIHandler handler, List<String> args) async {
  final (path, options, arguments) = resolveSubcommand(args);
  final subcommandPath = path;

  switch (subcommandPath.join(' ')) {
  case "":
    final input = Input();
    input.resolveInput(subcommandPath, options, arguments);
    await handler.Run(input);
    break;
  case "data":
    final input = Input_Data();
    input.resolveInput(subcommandPath, options, arguments);
    await handler.Run_Data(input);
    break;
  case "schema":
    final input = Input_Schema();
    input.resolveInput(subcommandPath, options, arguments);
    await handler.Run_Schema(input);
    break;
  case "tables":
    final input = Input_Tables();
    input.resolveInput(subcommandPath, options, arguments);
    await handler.Run_Tables(input);
    break;
  }
}


/// Input class for Run
class Input {String Opt_Config = "";
  List<String> subcommand = [];
  List<String> options = [];
  List<String> arguments = [];

  String? errorMessage;

  /// toString representation of the input
  @override
  String toString() {
      final buffer = StringBuffer();
      buffer.writeln('Subcommand: [${subcommand.join(' ')}]');
      buffer.writeln('Options: [${options.join(', ')}]');
      buffer.writeln('Arguments: [${arguments.join(', ')}]');buffer.writeln('Opt_Config: $Opt_Config');
      if (errorMessage != null) {
        buffer.writeln('Error: $errorMessage');
      }
      return buffer.toString();
    }
  void resolveInput(List<String> subcommand, List<String> options, List<String> arguments) {
    this.subcommand = subcommand;
    this.options = options;
    this.arguments = arguments;

    for (final arg in options) {
      final cut = arg.indexOf("=");
      String optName;
      String? lit;

      if (cut >= 0) {
        optName = arg.substring(0, cut);
        lit = arg.substring(cut + 1);
      }else{
        optName = arg;
      }
      if (['-config'].contains(optName)) {
        if (cut < 0) {
          errorMessage = 'Value is not specified to option "$optName"';
          return;
        }
        dynamic v;
        try {
          v = parseValue(lit!, 'String');
        } catch (e) {
          errorMessage = 'Value "$lit" is not assignable to option "$optName"';
          return;
        }
        Opt_Config = v;
        continue;
      }
      
      errorMessage = 'Unknown option "$optName"';
      return;
    }

    final expectedArgs = 0;

    }
}

/// Input class for Run_Data
class Input_Data {String Opt_Config = "";
  String Opt_Where = "";
  String? Arg_Table;
  List<String> subcommand = [];
  List<String> options = [];
  List<String> arguments = [];

  String? errorMessage;

  /// toString representation of the input
  @override
  String toString() {
      final buffer = StringBuffer();
      buffer.writeln('Subcommand: [${subcommand.join(' ')}]');
      buffer.writeln('Options: [${options.join(', ')}]');
      buffer.writeln('Arguments: [${arguments.join(', ')}]');buffer.writeln('Opt_Config: $Opt_Config');
      buffer.writeln('Opt_Where: $Opt_Where');
      buffer.writeln('Arg_Table: $Arg_Table');
      if (errorMessage != null) {
        buffer.writeln('Error: $errorMessage');
      }
      return buffer.toString();
    }
  void resolveInput(List<String> subcommand, List<String> options, List<String> arguments) {
    this.subcommand = subcommand;
    this.options = options;
    this.arguments = arguments;

    for (final arg in options) {
      final cut = arg.indexOf("=");
      String optName;
      String? lit;

      if (cut >= 0) {
        optName = arg.substring(0, cut);
        lit = arg.substring(cut + 1);
      }else{
        optName = arg;
      }
      if (['-config'].contains(optName)) {
        if (cut < 0) {
          errorMessage = 'Value is not specified to option "$optName"';
          return;
        }
        dynamic v;
        try {
          v = parseValue(lit!, 'String');
        } catch (e) {
          errorMessage = 'Value "$lit" is not assignable to option "$optName"';
          return;
        }
        Opt_Config = v;
        continue;
      }
      
      
      if (['-where'].contains(optName)) {
        if (cut < 0) {
          errorMessage = 'Value is not specified to option "$optName"';
          return;
        }
        dynamic v;
        try {
          v = parseValue(lit!, 'String');
        } catch (e) {
          errorMessage = 'Value "$lit" is not assignable to option "$optName"';
          return;
        }
        Opt_Where = v;
        continue;
      }
      
      errorMessage = 'Unknown option "$optName"';
      return;
    }

    final expectedArgs = 1;

    
    if (arguments.length <= 0) {
      errorMessage = 'Too few arguments: required $expectedArgs, got ${arguments.length}';
      return;
    }
    try {
      Arg_Table = parseValue(arguments[0], 'String');
    } catch (e) {
      errorMessage = 'Value "${arguments[0]}" is not assignable to argument at [0]';
      return;
    }
    }
}

/// Input class for Run_Schema
class Input_Schema {String Opt_Config = "";
  String? Arg_Table;
  List<String> subcommand = [];
  List<String> options = [];
  List<String> arguments = [];

  String? errorMessage;

  /// toString representation of the input
  @override
  String toString() {
      final buffer = StringBuffer();
      buffer.writeln('Subcommand: [${subcommand.join(' ')}]');
      buffer.writeln('Options: [${options.join(', ')}]');
      buffer.writeln('Arguments: [${arguments.join(', ')}]');buffer.writeln('Opt_Config: $Opt_Config');
      buffer.writeln('Arg_Table: $Arg_Table');
      if (errorMessage != null) {
        buffer.writeln('Error: $errorMessage');
      }
      return buffer.toString();
    }
  void resolveInput(List<String> subcommand, List<String> options, List<String> arguments) {
    this.subcommand = subcommand;
    this.options = options;
    this.arguments = arguments;

    for (final arg in options) {
      final cut = arg.indexOf("=");
      String optName;
      String? lit;

      if (cut >= 0) {
        optName = arg.substring(0, cut);
        lit = arg.substring(cut + 1);
      }else{
        optName = arg;
      }
      if (['-config'].contains(optName)) {
        if (cut < 0) {
          errorMessage = 'Value is not specified to option "$optName"';
          return;
        }
        dynamic v;
        try {
          v = parseValue(lit!, 'String');
        } catch (e) {
          errorMessage = 'Value "$lit" is not assignable to option "$optName"';
          return;
        }
        Opt_Config = v;
        continue;
      }
      
      errorMessage = 'Unknown option "$optName"';
      return;
    }

    final expectedArgs = 1;

    
    if (arguments.length <= 0) {
      errorMessage = 'Too few arguments: required $expectedArgs, got ${arguments.length}';
      return;
    }
    try {
      Arg_Table = parseValue(arguments[0], 'String');
    } catch (e) {
      errorMessage = 'Value "${arguments[0]}" is not assignable to argument at [0]';
      return;
    }
    }
}

/// Input class for Run_Tables
class Input_Tables {String Opt_Config = "";
  List<String> subcommand = [];
  List<String> options = [];
  List<String> arguments = [];

  String? errorMessage;

  /// toString representation of the input
  @override
  String toString() {
      final buffer = StringBuffer();
      buffer.writeln('Subcommand: [${subcommand.join(' ')}]');
      buffer.writeln('Options: [${options.join(', ')}]');
      buffer.writeln('Arguments: [${arguments.join(', ')}]');buffer.writeln('Opt_Config: $Opt_Config');
      if (errorMessage != null) {
        buffer.writeln('Error: $errorMessage');
      }
      return buffer.toString();
    }
  void resolveInput(List<String> subcommand, List<String> options, List<String> arguments) {
    this.subcommand = subcommand;
    this.options = options;
    this.arguments = arguments;

    for (final arg in options) {
      final cut = arg.indexOf("=");
      String optName;
      String? lit;

      if (cut >= 0) {
        optName = arg.substring(0, cut);
        lit = arg.substring(cut + 1);
      }else{
        optName = arg;
      }
      if (['-config'].contains(optName)) {
        if (cut < 0) {
          errorMessage = 'Value is not specified to option "$optName"';
          return;
        }
        dynamic v;
        try {
          v = parseValue(lit!, 'String');
        } catch (e) {
          errorMessage = 'Value "$lit" is not assignable to option "$optName"';
          return;
        }
        Opt_Config = v;
        continue;
      }
      
      errorMessage = 'Unknown option "$optName"';
      return;
    }

    final expectedArgs = 0;

    }
}
/// Resolves the subcommand from the arguments
(List<String> subcommandPath, List<String> options, List<String> arguments) resolveSubcommand(List<String> args) {
  final subcommandSet = {
    "": true,  "data": true,  "schema": true,  "tables": true,
  };

  final subcommandPath = <String>[];

  for (final arg in args) {
    if (arg == '--') {
      break;
    }
    final pathLiteral = [...subcommandPath, arg].join(' ');
    if (!subcommandSet.containsKey(pathLiteral)) {
      break;
    }
    subcommandPath.add(arg);
  }

  final restArgs = args.sublist(subcommandPath.length);
  final options = <String>[];
  final arguments = <String>[];
  for (int idx = 0; idx < restArgs.length; idx++) {
    final arg = restArgs[idx];
    if (arg == '--') {
      arguments.addAll(restArgs.sublist(idx + 1));
      break;
    }
    if (arg.startsWith('-')) {
      options.add(arg);
    } else {
      arguments.add(arg);
    }
  }

  return (subcommandPath, options, arguments);
}

/// Parses a string value to the specified type
dynamic parseValue(String strValue, String typeName) {
  switch (typeName) {
    case 'List<bool>':
      return parseValue(strValue, 'bool') as bool;
    case 'List<int>':
      return parseValue(strValue, 'int') as int;
    case 'List<String>':
      return parseValue(strValue, 'String') as String;
    case 'bool':
      if (['true', 't', '1'].contains(strValue.toLowerCase())) return true;
      if (['false', 'f', '0'].contains(strValue.toLowerCase())) return false;
      throw FormatException('Failed to parse "$strValue" as bool');
    case 'int':
      try {
        return int.parse(strValue);
      } catch (e) {
        throw FormatException('Failed to parse "$strValue" as int');
      }
    case 'String':
      return strValue;
    default:
      throw FormatException('Unsupported type: $typeName');
  }
}
/// Parses a string values to the specified type
List<dynamic> parseValues(List<String> strValue, String typeName) {
  switch (typeName) {
    case 'List<bool>':
      return strValue.map((s) => parseValue(s, 'bool') as bool).toList();
    case 'List<int>':
      return strValue.map((s) => parseValue(s, 'int') as int).toList();
    case 'List<String>':
      return strValue.map((s) => parseValue(s, 'String') as String).toList();
    default:
      throw FormatException('Unsupported type: $typeName');
  }
}

/// Returns the version of the program.
String getVersion() {
  return '';
}
/// Returns the program name.
String getProgram() {
  return 'demo';
}

/// Gets documentation for a subcommand
String getDoc(List<String> subcommands) {
  switch (subcommands.join(' ')) {
    case "":
      return "demo \n\n    Syntax:\n        \$ demo  [<option>]...\n\n    Options:\n        -config=<string>  (default=\"\"):\n            path to the config file.\n\n    Subcommands:\n        data:\n            dump data from the specified table from the database.\n\n        schema:\n            fetch schema of the specified table from the database.\n\n        tables:\n            list tables from the database.\n\n\n";
  
    case "data":
      return "demo data\n\n    Description:\n        dump data from the specified table from the database.\n\n    Syntax:\n        \$ demo data [<option>|<argument>]... [-- [<argument>]...]\n\n    Options:\n        -config=<string>  (default=\"\"):\n            path to the config file.\n\n        -where=<string>  (default=\"\"):\n            filter data by the condition.\n\n    Arguments:\n        1.  <table:string>\n\n\n";
  
    case "schema":
      return "demo schema\n\n    Description:\n        fetch schema of the specified table from the database.\n\n    Syntax:\n        \$ demo schema [<option>|<argument>]... [-- [<argument>]...]\n\n    Options:\n        -config=<string>  (default=\"\"):\n            path to the config file.\n\n    Arguments:\n        1.  <table:string>\n\n\n";
  
    case "tables":
      return "demo tables\n\n    Description:\n        list tables from the database.\n\n    Syntax:\n        \$ demo tables [<option>]...\n\n    Options:\n        -config=<string>  (default=\"\"):\n            path to the config file.\n\n\n";
  default:
      throw Exception('Invalid subcommands: $subcommands');
  }
}
