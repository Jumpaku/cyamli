// Code generated by cyamli, DO NOT EDIT.
// ignore_for_file: non_constant_identifier_names

import 'package:test/test.dart';
import 'package:cyamli_dart/cyamli/cli.g.dart';

class CLIHandlerMock implements CLIHandler {
  dynamic gotInput;

@override
  Future<void> Run(Input input) async {
    gotInput = input;
  }
@override
  Future<void> Run_Generate(Input_Generate input) async {
    gotInput = input;
  }
@override
  Future<void> Run_GenerateDart3(Input_GenerateDart3 input) async {
    gotInput = input;
  }
@override
  Future<void> Run_GenerateDocs(Input_GenerateDocs input) async {
    gotInput = input;
  }
@override
  Future<void> Run_GenerateGolang(Input_GenerateGolang input) async {
    gotInput = input;
  }
@override
  Future<void> Run_GenerateKotlin(Input_GenerateKotlin input) async {
    gotInput = input;
  }
@override
  Future<void> Run_GeneratePython3(Input_GeneratePython3 input) async {
    gotInput = input;
  }
@override
  Future<void> Run_GenerateTypescript(Input_GenerateTypescript input) async {
    gotInput = input;
  }
@override
  Future<void> Run_Version(Input_Version input) async {
    gotInput = input;
  }

}

void main() {
  
  group('Run', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          
          '-help=0',
          '--',
        ],
        'wantInput': Input()
          ..Opt_Help = false
      },
      {
        'name': 'default-options',
        'args': [
          
          '--',
        ],
        'wantInput': Input()
          ..Opt_Help = false
      },
      {
        'name': 'short-options',
        'args': [
          
          '-h=0',
          '--',
        ],
        'wantInput': Input()
          ..Opt_Help = false
      },
      {
        'name': 'negated-options',
        'args': [
          
          '-help=0',
          '--',
        ],
        'wantInput': Input()
          ..Opt_Help = false
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          
          '-help=0',
          '--',
        ],
        'wantInput': Input()
          ..Opt_Help = false
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          
          '-help=0',
          '--',
        ],
        'wantInput': Input()
          ..Opt_Help = false
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input;
        final want = tc['wantInput'] as Input;
        
        expect(got.Opt_Help, equals(want.Opt_Help), reason: 'unexpected input for option: -help');
        
      });
    }
  });
  
  group('Run_Generate', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'generate', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_Generate()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'generate', 
          '--',
        ],
        'wantInput': Input_Generate()
          ..Opt_Help = false
          ..Opt_OutPath = ""
          ..Opt_SchemaPath = ""
      },
      {
        'name': 'short-options',
        'args': [
          'generate', 
          '-h=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_Generate()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'generate', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_Generate()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'generate', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_Generate()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'generate', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_Generate()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_Generate;
        final want = tc['wantInput'] as Input_Generate;
        
        expect(got.Opt_Help, equals(want.Opt_Help), reason: 'unexpected input for option: -help');
        expect(got.Opt_OutPath, equals(want.Opt_OutPath), reason: 'unexpected input for option: -out-path');
        expect(got.Opt_SchemaPath, equals(want.Opt_SchemaPath), reason: 'unexpected input for option: -schema-path');
        
      });
    }
  });
  
  group('Run_GenerateDart3', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'generate', 'dart3', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateDart3()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'generate', 'dart3', 
          '--',
        ],
        'wantInput': Input_GenerateDart3()
          ..Opt_Help = false
          ..Opt_OutPath = ""
          ..Opt_SchemaPath = ""
      },
      {
        'name': 'short-options',
        'args': [
          'generate', 'dart3', 
          '-h=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateDart3()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'generate', 'dart3', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateDart3()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'generate', 'dart3', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateDart3()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'generate', 'dart3', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateDart3()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_GenerateDart3;
        final want = tc['wantInput'] as Input_GenerateDart3;
        
        expect(got.Opt_Help, equals(want.Opt_Help), reason: 'unexpected input for option: -help');
        expect(got.Opt_OutPath, equals(want.Opt_OutPath), reason: 'unexpected input for option: -out-path');
        expect(got.Opt_SchemaPath, equals(want.Opt_SchemaPath), reason: 'unexpected input for option: -schema-path');
        
      });
    }
  });
  
  group('Run_GenerateDocs', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'generate', 'docs', 
          '-format=0',
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateDocs()
          ..Opt_Format = '0'
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'generate', 'docs', 
          '--',
        ],
        'wantInput': Input_GenerateDocs()
          ..Opt_Format = "text"
          ..Opt_Help = false
          ..Opt_OutPath = ""
          ..Opt_SchemaPath = ""
      },
      {
        'name': 'short-options',
        'args': [
          'generate', 'docs', 
          '-f=0',
          '-h=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateDocs()
          ..Opt_Format = '0'
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'generate', 'docs', 
          '-format=0',
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateDocs()
          ..Opt_Format = '0'
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'generate', 'docs', 
          '-format=0',
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateDocs()
          ..Opt_Format = '0'
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'generate', 'docs', 
          '-format=0',
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateDocs()
          ..Opt_Format = '0'
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_GenerateDocs;
        final want = tc['wantInput'] as Input_GenerateDocs;
        
        expect(got.Opt_Format, equals(want.Opt_Format), reason: 'unexpected input for option: -format');
        expect(got.Opt_Help, equals(want.Opt_Help), reason: 'unexpected input for option: -help');
        expect(got.Opt_OutPath, equals(want.Opt_OutPath), reason: 'unexpected input for option: -out-path');
        expect(got.Opt_SchemaPath, equals(want.Opt_SchemaPath), reason: 'unexpected input for option: -schema-path');
        
      });
    }
  });
  
  group('Run_GenerateGolang', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'generate', 'golang', 
          '-help=0',
          '-out-path=0',
          '-package=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateGolang()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_Package = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'generate', 'golang', 
          '--',
        ],
        'wantInput': Input_GenerateGolang()
          ..Opt_Help = false
          ..Opt_OutPath = ""
          ..Opt_Package = "main"
          ..Opt_SchemaPath = ""
      },
      {
        'name': 'short-options',
        'args': [
          'generate', 'golang', 
          '-h=0',
          '-out-path=0',
          '-package=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateGolang()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_Package = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'generate', 'golang', 
          '-help=0',
          '-out-path=0',
          '-package=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateGolang()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_Package = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'generate', 'golang', 
          '-help=0',
          '-out-path=0',
          '-package=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateGolang()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_Package = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'generate', 'golang', 
          '-help=0',
          '-out-path=0',
          '-package=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateGolang()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_Package = '0'
          ..Opt_SchemaPath = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_GenerateGolang;
        final want = tc['wantInput'] as Input_GenerateGolang;
        
        expect(got.Opt_Help, equals(want.Opt_Help), reason: 'unexpected input for option: -help');
        expect(got.Opt_OutPath, equals(want.Opt_OutPath), reason: 'unexpected input for option: -out-path');
        expect(got.Opt_Package, equals(want.Opt_Package), reason: 'unexpected input for option: -package');
        expect(got.Opt_SchemaPath, equals(want.Opt_SchemaPath), reason: 'unexpected input for option: -schema-path');
        
      });
    }
  });
  
  group('Run_GenerateKotlin', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'generate', 'kotlin', 
          '-help=0',
          '-out-path=0',
          '-package=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateKotlin()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_Package = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'generate', 'kotlin', 
          '--',
        ],
        'wantInput': Input_GenerateKotlin()
          ..Opt_Help = false
          ..Opt_OutPath = ""
          ..Opt_Package = ""
          ..Opt_SchemaPath = ""
      },
      {
        'name': 'short-options',
        'args': [
          'generate', 'kotlin', 
          '-h=0',
          '-out-path=0',
          '-package=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateKotlin()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_Package = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'generate', 'kotlin', 
          '-help=0',
          '-out-path=0',
          '-package=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateKotlin()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_Package = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'generate', 'kotlin', 
          '-help=0',
          '-out-path=0',
          '-package=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateKotlin()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_Package = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'generate', 'kotlin', 
          '-help=0',
          '-out-path=0',
          '-package=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateKotlin()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_Package = '0'
          ..Opt_SchemaPath = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_GenerateKotlin;
        final want = tc['wantInput'] as Input_GenerateKotlin;
        
        expect(got.Opt_Help, equals(want.Opt_Help), reason: 'unexpected input for option: -help');
        expect(got.Opt_OutPath, equals(want.Opt_OutPath), reason: 'unexpected input for option: -out-path');
        expect(got.Opt_Package, equals(want.Opt_Package), reason: 'unexpected input for option: -package');
        expect(got.Opt_SchemaPath, equals(want.Opt_SchemaPath), reason: 'unexpected input for option: -schema-path');
        
      });
    }
  });
  
  group('Run_GeneratePython3', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'generate', 'python3', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GeneratePython3()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'generate', 'python3', 
          '--',
        ],
        'wantInput': Input_GeneratePython3()
          ..Opt_Help = false
          ..Opt_OutPath = ""
          ..Opt_SchemaPath = ""
      },
      {
        'name': 'short-options',
        'args': [
          'generate', 'python3', 
          '-h=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GeneratePython3()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'generate', 'python3', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GeneratePython3()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'generate', 'python3', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GeneratePython3()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'generate', 'python3', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GeneratePython3()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_GeneratePython3;
        final want = tc['wantInput'] as Input_GeneratePython3;
        
        expect(got.Opt_Help, equals(want.Opt_Help), reason: 'unexpected input for option: -help');
        expect(got.Opt_OutPath, equals(want.Opt_OutPath), reason: 'unexpected input for option: -out-path');
        expect(got.Opt_SchemaPath, equals(want.Opt_SchemaPath), reason: 'unexpected input for option: -schema-path');
        
      });
    }
  });
  
  group('Run_GenerateTypescript', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'generate', 'typescript', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateTypescript()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'generate', 'typescript', 
          '--',
        ],
        'wantInput': Input_GenerateTypescript()
          ..Opt_Help = false
          ..Opt_OutPath = ""
          ..Opt_SchemaPath = ""
      },
      {
        'name': 'short-options',
        'args': [
          'generate', 'typescript', 
          '-h=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateTypescript()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'generate', 'typescript', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateTypescript()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'generate', 'typescript', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateTypescript()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'generate', 'typescript', 
          '-help=0',
          '-out-path=0',
          '-schema-path=0',
          '--',
        ],
        'wantInput': Input_GenerateTypescript()
          ..Opt_Help = false
          ..Opt_OutPath = '0'
          ..Opt_SchemaPath = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_GenerateTypescript;
        final want = tc['wantInput'] as Input_GenerateTypescript;
        
        expect(got.Opt_Help, equals(want.Opt_Help), reason: 'unexpected input for option: -help');
        expect(got.Opt_OutPath, equals(want.Opt_OutPath), reason: 'unexpected input for option: -out-path');
        expect(got.Opt_SchemaPath, equals(want.Opt_SchemaPath), reason: 'unexpected input for option: -schema-path');
        
      });
    }
  });
  
  group('Run_Version', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'version', 
          '-help=0',
          '--',
        ],
        'wantInput': Input_Version()
          ..Opt_Help = false
      },
      {
        'name': 'default-options',
        'args': [
          'version', 
          '--',
        ],
        'wantInput': Input_Version()
          ..Opt_Help = false
      },
      {
        'name': 'short-options',
        'args': [
          'version', 
          '-h=0',
          '--',
        ],
        'wantInput': Input_Version()
          ..Opt_Help = false
      },
      {
        'name': 'negated-options',
        'args': [
          'version', 
          '-help=0',
          '--',
        ],
        'wantInput': Input_Version()
          ..Opt_Help = false
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'version', 
          '-help=0',
          '--',
        ],
        'wantInput': Input_Version()
          ..Opt_Help = false
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'version', 
          '-help=0',
          '--',
        ],
        'wantInput': Input_Version()
          ..Opt_Help = false
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_Version;
        final want = tc['wantInput'] as Input_Version;
        
        expect(got.Opt_Help, equals(want.Opt_Help), reason: 'unexpected input for option: -help');
        
      });
    }
  });
  
}
