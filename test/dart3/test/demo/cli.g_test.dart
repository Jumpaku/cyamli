// Code generated by cyamli, DO NOT EDIT.
// ignore_for_file: non_constant_identifier_names

import 'package:test/test.dart';
import 'package:cyamli_dart/demo/cli.g.dart';

class CLIHandlerMock implements CLIHandler {
  dynamic gotInput;

@override
  Future<void> Run(Input input) async {
    gotInput = input;
  }
@override
  Future<void> Run_Data(Input_Data input) async {
    gotInput = input;
  }
@override
  Future<void> Run_Schema(Input_Schema input) async {
    gotInput = input;
  }
@override
  Future<void> Run_Tables(Input_Tables input) async {
    gotInput = input;
  }

}

void main() {
  
  group('Run', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          
          '-config=0',
          '--',
        ],
        'wantInput': Input()
          ..Opt_Config = '0'
      },
      {
        'name': 'default-options',
        'args': [
          
          '--',
        ],
        'wantInput': Input()
          ..Opt_Config = ""
      },
      {
        'name': 'short-options',
        'args': [
          
          '-config=0',
          '--',
        ],
        'wantInput': Input()
          ..Opt_Config = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          
          '-config=0',
          '--',
        ],
        'wantInput': Input()
          ..Opt_Config = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          
          '-config=0',
          '--',
        ],
        'wantInput': Input()
          ..Opt_Config = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          
          '-config=0',
          '--',
        ],
        'wantInput': Input()
          ..Opt_Config = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input;
        final want = tc['wantInput'] as Input;
        
        expect(got.Opt_Config, equals(want.Opt_Config), reason: 'unexpected input for option: -config');
        
      });
    }
  });
  
  group('Run_Data', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'data', 
          '-config=0',
          '-where=0',
          '--',
          '0',
        ],
        'wantInput': Input_Data()
          ..Opt_Config = '0'
          ..Opt_Where = '0'
          ..Arg_Table = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'data', 
          '--',
          '0',
        ],
        'wantInput': Input_Data()
          ..Opt_Config = ""
          ..Opt_Where = ""
          ..Arg_Table = '0'
      },
      {
        'name': 'short-options',
        'args': [
          'data', 
          '-config=0',
          '-where=0',
          '--',
          '0',
        ],
        'wantInput': Input_Data()
          ..Opt_Config = '0'
          ..Opt_Where = '0'
          ..Arg_Table = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'data', 
          '-config=0',
          '-where=0',
          '--',
          '0',
        ],
        'wantInput': Input_Data()
          ..Opt_Config = '0'
          ..Opt_Where = '0'
          ..Arg_Table = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'data', 
          '-config=0',
          '-where=0',
          '--',
          '0',
        ],
        'wantInput': Input_Data()
          ..Opt_Config = '0'
          ..Opt_Where = '0'
          ..Arg_Table = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'data', 
          '-config=0',
          '-where=0',
          '--',
          '0',
        ],
        'wantInput': Input_Data()
          ..Opt_Config = '0'
          ..Opt_Where = '0'
          ..Arg_Table = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_Data;
        final want = tc['wantInput'] as Input_Data;
        
        expect(got.Opt_Config, equals(want.Opt_Config), reason: 'unexpected input for option: -config');
        expect(got.Opt_Where, equals(want.Opt_Where), reason: 'unexpected input for option: -where');
        
        expect(got.Arg_Table, equals(want.Arg_Table), reason: 'unexpected input for argument: table');
      });
    }
  });
  
  group('Run_Schema', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'schema', 
          '-config=0',
          '--',
          '0',
        ],
        'wantInput': Input_Schema()
          ..Opt_Config = '0'
          ..Arg_Table = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'schema', 
          '--',
          '0',
        ],
        'wantInput': Input_Schema()
          ..Opt_Config = ""
          ..Arg_Table = '0'
      },
      {
        'name': 'short-options',
        'args': [
          'schema', 
          '-config=0',
          '--',
          '0',
        ],
        'wantInput': Input_Schema()
          ..Opt_Config = '0'
          ..Arg_Table = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'schema', 
          '-config=0',
          '--',
          '0',
        ],
        'wantInput': Input_Schema()
          ..Opt_Config = '0'
          ..Arg_Table = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'schema', 
          '-config=0',
          '--',
          '0',
        ],
        'wantInput': Input_Schema()
          ..Opt_Config = '0'
          ..Arg_Table = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'schema', 
          '-config=0',
          '--',
          '0',
        ],
        'wantInput': Input_Schema()
          ..Opt_Config = '0'
          ..Arg_Table = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_Schema;
        final want = tc['wantInput'] as Input_Schema;
        
        expect(got.Opt_Config, equals(want.Opt_Config), reason: 'unexpected input for option: -config');
        
        expect(got.Arg_Table, equals(want.Arg_Table), reason: 'unexpected input for argument: table');
      });
    }
  });
  
  group('Run_Tables', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'tables', 
          '-config=0',
          '--',
        ],
        'wantInput': Input_Tables()
          ..Opt_Config = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'tables', 
          '--',
        ],
        'wantInput': Input_Tables()
          ..Opt_Config = ""
      },
      {
        'name': 'short-options',
        'args': [
          'tables', 
          '-config=0',
          '--',
        ],
        'wantInput': Input_Tables()
          ..Opt_Config = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'tables', 
          '-config=0',
          '--',
        ],
        'wantInput': Input_Tables()
          ..Opt_Config = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'tables', 
          '-config=0',
          '--',
        ],
        'wantInput': Input_Tables()
          ..Opt_Config = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'tables', 
          '-config=0',
          '--',
        ],
        'wantInput': Input_Tables()
          ..Opt_Config = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_Tables;
        final want = tc['wantInput'] as Input_Tables;
        
        expect(got.Opt_Config, equals(want.Opt_Config), reason: 'unexpected input for option: -config');
        
      });
    }
  });
  
}
