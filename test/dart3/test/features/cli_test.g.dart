// Code generated by cyamli, DO NOT EDIT.
// ignore_for_file: non_constant_identifier_names

import 'package:test/test.dart';
import 'package:cyamli_dart/features/cli.g.dart';

class CLIHandlerMock implements CLIHandler {
  dynamic gotInput;

@override
  Future<void> Run(Input input) async {
    gotInput = input;
  }
@override
  Future<void> Run_Sub1(Input_Sub1 input) async {
    gotInput = input;
  }
@override
  Future<void> Run_Sub1Sub2(Input_Sub1Sub2 input) async {
    gotInput = input;
  }
@override
  Future<void> Run_Sub1Sub2Sub3(Input_Sub1Sub2Sub3 input) async {
    gotInput = input;
  }

}

void main() {
  
  group('Run', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          
          '-negation-option=0',
          '-option=0',
          '-propagation-option=0',
          '-repeatable-option=0',
          '--',
          '0',
          '0',
          '0',
        ],
        'wantInput': Input()
          ..Opt_NegationOption = false
          ..Opt_Option = 0
          ..Opt_PropagationOption = '0'
          ..Opt_RepeatableOption = '0'
          ..Arg_FirstArg = false
          ..Arg_SecondArg = 0
          ..Arg_ThirdArg = ['0']
      },
      {
        'name': 'default-options',
        'args': [
          
          '--',
          '0',
          '0',
          '0',
        ],
        'wantInput': Input()
          ..Opt_NegationOption = false
          ..Opt_Option = 123
          ..Opt_PropagationOption = ""
          ..Opt_RepeatableOption = ""
          ..Arg_FirstArg = false
          ..Arg_SecondArg = 0
          ..Arg_ThirdArg = ['0']
      },
      {
        'name': 'short-options',
        'args': [
          
          '-negation-option=0',
          '-o=0',
          '-propagation-option=0',
          '-repeatable-option=0',
          '--',
          '0',
          '0',
          '0',
        ],
        'wantInput': Input()
          ..Opt_NegationOption = false
          ..Opt_Option = 0
          ..Opt_PropagationOption = '0'
          ..Opt_RepeatableOption = '0'
          ..Arg_FirstArg = false
          ..Arg_SecondArg = 0
          ..Arg_ThirdArg = ['0']
      },
      {
        'name': 'negated-options',
        'args': [
          
          '-no-negation-option=1',
          '-option=0',
          '-propagation-option=0',
          '-repeatable-option=0',
          '--',
          '0',
          '0',
          '0',
        ],
        'wantInput': Input()
          ..Opt_NegationOption = false
          ..Opt_Option = 0
          ..Opt_PropagationOption = '0'
          ..Opt_RepeatableOption = '0'
          ..Arg_FirstArg = false
          ..Arg_SecondArg = 0
          ..Arg_ThirdArg = ['0']
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          
          '-no-negation-option=1',
          '-option=0',
          '-propagation-option=0',
          '-repeatable-option=0',
          '--',
          '0',
          '0',
          
        ],
        'wantInput': Input()
          ..Opt_NegationOption = false
          ..Opt_Option = 0
          ..Opt_PropagationOption = '0'
          ..Opt_RepeatableOption = '0'
          ..Arg_FirstArg = false
          ..Arg_SecondArg = 0
          ..Arg_ThirdArg = <String>[]
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          
          '-no-negation-option=1',
          '-option=0',
          '-propagation-option=0',
          '-repeatable-option=0',
          '--',
          '0',
          '0',
          '0', '0',
        ],
        'wantInput': Input()
          ..Opt_NegationOption = false
          ..Opt_Option = 0
          ..Opt_PropagationOption = '0'
          ..Opt_RepeatableOption = '0'
          ..Arg_FirstArg = false
          ..Arg_SecondArg = 0
          ..Arg_ThirdArg = ['0', '0']
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input;
        final want = tc['wantInput'] as Input;
        
        expect(got.Opt_NegationOption, equals(want.Opt_NegationOption), reason: 'unexpected input for option: -negation-option');
        expect(got.Opt_Option, equals(want.Opt_Option), reason: 'unexpected input for option: -option');
        expect(got.Opt_PropagationOption, equals(want.Opt_PropagationOption), reason: 'unexpected input for option: -propagation-option');
        expect(got.Opt_RepeatableOption, equals(want.Opt_RepeatableOption), reason: 'unexpected input for option: -repeatable-option');
        
        expect(got.Arg_FirstArg, equals(want.Arg_FirstArg), reason: 'unexpected input for argument: first_arg');
        expect(got.Arg_SecondArg, equals(want.Arg_SecondArg), reason: 'unexpected input for argument: second_arg');
        expect(got.Arg_ThirdArg, equals(want.Arg_ThirdArg), reason: 'unexpected input for argument: third_arg');
      });
    }
  });
  
  group('Run_Sub1', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'sub1', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'sub1', 
          '--',
        ],
        'wantInput': Input_Sub1()
          ..Opt_PropagationOption = ""
      },
      {
        'name': 'short-options',
        'args': [
          'sub1', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'sub1', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'sub1', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'sub1', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1()
          ..Opt_PropagationOption = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_Sub1;
        final want = tc['wantInput'] as Input_Sub1;
        
        expect(got.Opt_PropagationOption, equals(want.Opt_PropagationOption), reason: 'unexpected input for option: -propagation-option');
        
      });
    }
  });
  
  group('Run_Sub1Sub2', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'sub1', 'sub2', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1Sub2()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'sub1', 'sub2', 
          '--',
        ],
        'wantInput': Input_Sub1Sub2()
          ..Opt_PropagationOption = ""
      },
      {
        'name': 'short-options',
        'args': [
          'sub1', 'sub2', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1Sub2()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'sub1', 'sub2', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1Sub2()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'sub1', 'sub2', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1Sub2()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'sub1', 'sub2', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1Sub2()
          ..Opt_PropagationOption = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_Sub1Sub2;
        final want = tc['wantInput'] as Input_Sub1Sub2;
        
        expect(got.Opt_PropagationOption, equals(want.Opt_PropagationOption), reason: 'unexpected input for option: -propagation-option');
        
      });
    }
  });
  
  group('Run_Sub1Sub2Sub3', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          'sub1', 'sub2', 'sub3', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1Sub2Sub3()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'default-options',
        'args': [
          'sub1', 'sub2', 'sub3', 
          '--',
        ],
        'wantInput': Input_Sub1Sub2Sub3()
          ..Opt_PropagationOption = ""
      },
      {
        'name': 'short-options',
        'args': [
          'sub1', 'sub2', 'sub3', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1Sub2Sub3()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'negated-options',
        'args': [
          'sub1', 'sub2', 'sub3', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1Sub2Sub3()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          'sub1', 'sub2', 'sub3', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1Sub2Sub3()
          ..Opt_PropagationOption = '0'
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          'sub1', 'sub2', 'sub3', 
          '-propagation-option=0',
          '--',
        ],
        'wantInput': Input_Sub1Sub2Sub3()
          ..Opt_PropagationOption = '0'
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as Input_Sub1Sub2Sub3;
        final want = tc['wantInput'] as Input_Sub1Sub2Sub3;
        
        expect(got.Opt_PropagationOption, equals(want.Opt_PropagationOption), reason: 'unexpected input for option: -propagation-option');
        
      });
    }
  });
  
}
