// Code generated by cyamli, DO NOT EDIT.
package demo_test

import (
	. "cyamli/test/golang/demo"
	"github.com/stretchr/testify/assert"
	"testing"
)

type CLIHandlerMock struct {
	GotInput any
}

var _ CLIHandler = (*CLIHandlerMock)(nil)

func (m *CLIHandlerMock) Run(input Input) error {
	m.GotInput = input
	return nil
}
func (m *CLIHandlerMock) Run_Data(input Input_Data) error {
	m.GotInput = input
	return nil
}
func (m *CLIHandlerMock) Run_Schema(input Input_Schema) error {
	m.GotInput = input
	return nil
}
func (m *CLIHandlerMock) Run_Tables(input Input_Tables) error {
	m.GotInput = input
	return nil
}

func TestRun(t *testing.T) {
	testcases := []struct {
		name      string
		args      []string
		wantInput Input
	}{
		{
			name: "command-line-arguments",
			args: []string{
				"",
				"-config=0",
				"--",
			},
			wantInput: Input{
				Opt_Config: "0",
			},
		},
		{
			name: "default-options",
			args: []string{
				"",
				"--",
			},
			wantInput: Input{
				Opt_Config: "",
			},
		},
		{
			name: "short-options",
			args: []string{
				"",
				"-config=0",
				"--",
			},
			wantInput: Input{
				Opt_Config: "0",
			},
		},
		{
			name: "negated-options",
			args: []string{
				"",
				"-config=0",
				"--",
			},
			wantInput: Input{
				Opt_Config: "0",
			},
		},
		{
			name: "variadic-arguments-zero",
			args: []string{
				"",
				"-config=0",
				"--",
			},
			wantInput: Input{
				Opt_Config: "0",
			},
		},
		{
			name: "variadic-arguments-two",
			args: []string{
				"",
				"-config=0",
				"--",
			},
			wantInput: Input{
				Opt_Config: "0",
			},
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			mock := &CLIHandlerMock{}
			err := Run(mock, tc.args)
			if err != nil {
				t.Errorf("unexpected error: %v", err)
			}
			got := mock.GotInput.(Input)
			want := tc.wantInput

			assert.Equal(t, want.Opt_Config, got.Opt_Config, "unexpected input for option: %s", "-config")

		})
	}
}

func TestRun_Data(t *testing.T) {
	testcases := []struct {
		name      string
		args      []string
		wantInput Input_Data
	}{
		{
			name: "command-line-arguments",
			args: []string{
				"", "data",
				"-config=0",
				"-where=0",
				"--",
				"0",
			},
			wantInput: Input_Data{
				Opt_Config: "0",
				Opt_Where:  "0",
				Arg_Table:  "0",
			},
		},
		{
			name: "default-options",
			args: []string{
				"", "data",
				"--",
				"0",
			},
			wantInput: Input_Data{
				Opt_Config: "",
				Opt_Where:  "",
				Arg_Table:  "0",
			},
		},
		{
			name: "short-options",
			args: []string{
				"", "data",
				"-config=0",
				"-where=0",
				"--",
				"0",
			},
			wantInput: Input_Data{
				Opt_Config: "0",
				Opt_Where:  "0",
				Arg_Table:  "0",
			},
		},
		{
			name: "negated-options",
			args: []string{
				"", "data",
				"-config=0",
				"-where=0",
				"--",
				"0",
			},
			wantInput: Input_Data{
				Opt_Config: "0",
				Opt_Where:  "0",
				Arg_Table:  "0",
			},
		},
		{
			name: "variadic-arguments-zero",
			args: []string{
				"", "data",
				"-config=0",
				"-where=0",
				"--",
				"0",
			},
			wantInput: Input_Data{
				Opt_Config: "0",
				Opt_Where:  "0",
				Arg_Table:  "0",
			},
		},
		{
			name: "variadic-arguments-two",
			args: []string{
				"", "data",
				"-config=0",
				"-where=0",
				"--",
				"0",
			},
			wantInput: Input_Data{
				Opt_Config: "0",
				Opt_Where:  "0",
				Arg_Table:  "0",
			},
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			mock := &CLIHandlerMock{}
			err := Run(mock, tc.args)
			if err != nil {
				t.Errorf("unexpected error: %v", err)
			}
			got := mock.GotInput.(Input_Data)
			want := tc.wantInput

			assert.Equal(t, want.Opt_Config, got.Opt_Config, "unexpected input for option: %s", "-config")
			assert.Equal(t, want.Opt_Where, got.Opt_Where, "unexpected input for option: %s", "-where")

			assert.Equal(t, want.Arg_Table, got.Arg_Table, "unexpected input for argument: %s", "table")
		})
	}
}

func TestRun_Schema(t *testing.T) {
	testcases := []struct {
		name      string
		args      []string
		wantInput Input_Schema
	}{
		{
			name: "command-line-arguments",
			args: []string{
				"", "schema",
				"-config=0",
				"--",
				"0",
			},
			wantInput: Input_Schema{
				Opt_Config: "0",
				Arg_Table:  "0",
			},
		},
		{
			name: "default-options",
			args: []string{
				"", "schema",
				"--",
				"0",
			},
			wantInput: Input_Schema{
				Opt_Config: "",
				Arg_Table:  "0",
			},
		},
		{
			name: "short-options",
			args: []string{
				"", "schema",
				"-config=0",
				"--",
				"0",
			},
			wantInput: Input_Schema{
				Opt_Config: "0",
				Arg_Table:  "0",
			},
		},
		{
			name: "negated-options",
			args: []string{
				"", "schema",
				"-config=0",
				"--",
				"0",
			},
			wantInput: Input_Schema{
				Opt_Config: "0",
				Arg_Table:  "0",
			},
		},
		{
			name: "variadic-arguments-zero",
			args: []string{
				"", "schema",
				"-config=0",
				"--",
				"0",
			},
			wantInput: Input_Schema{
				Opt_Config: "0",
				Arg_Table:  "0",
			},
		},
		{
			name: "variadic-arguments-two",
			args: []string{
				"", "schema",
				"-config=0",
				"--",
				"0",
			},
			wantInput: Input_Schema{
				Opt_Config: "0",
				Arg_Table:  "0",
			},
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			mock := &CLIHandlerMock{}
			err := Run(mock, tc.args)
			if err != nil {
				t.Errorf("unexpected error: %v", err)
			}
			got := mock.GotInput.(Input_Schema)
			want := tc.wantInput

			assert.Equal(t, want.Opt_Config, got.Opt_Config, "unexpected input for option: %s", "-config")

			assert.Equal(t, want.Arg_Table, got.Arg_Table, "unexpected input for argument: %s", "table")
		})
	}
}

func TestRun_Tables(t *testing.T) {
	testcases := []struct {
		name      string
		args      []string
		wantInput Input_Tables
	}{
		{
			name: "command-line-arguments",
			args: []string{
				"", "tables",
				"-config=0",
				"--",
			},
			wantInput: Input_Tables{
				Opt_Config: "0",
			},
		},
		{
			name: "default-options",
			args: []string{
				"", "tables",
				"--",
			},
			wantInput: Input_Tables{
				Opt_Config: "",
			},
		},
		{
			name: "short-options",
			args: []string{
				"", "tables",
				"-config=0",
				"--",
			},
			wantInput: Input_Tables{
				Opt_Config: "0",
			},
		},
		{
			name: "negated-options",
			args: []string{
				"", "tables",
				"-config=0",
				"--",
			},
			wantInput: Input_Tables{
				Opt_Config: "0",
			},
		},
		{
			name: "variadic-arguments-zero",
			args: []string{
				"", "tables",
				"-config=0",
				"--",
			},
			wantInput: Input_Tables{
				Opt_Config: "0",
			},
		},
		{
			name: "variadic-arguments-two",
			args: []string{
				"", "tables",
				"-config=0",
				"--",
			},
			wantInput: Input_Tables{
				Opt_Config: "0",
			},
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			mock := &CLIHandlerMock{}
			err := Run(mock, tc.args)
			if err != nil {
				t.Errorf("unexpected error: %v", err)
			}
			got := mock.GotInput.(Input_Tables)
			want := tc.wantInput

			assert.Equal(t, want.Opt_Config, got.Opt_Config, "unexpected input for option: %s", "-config")

		})
	}
}
