// Code generated by cyamli, DO NOT EDIT.
package cyamli

import cyamli.*
import kotlin.test.*

class CLIHandlerMock : CLIHandler {
    var gotInput: Any? = null
    override fun execute(input: Input): Unit {
        gotInput = input
    }
    override fun execute_Generate(input: Input_Generate): Unit {
        gotInput = input
    }
    override fun execute_GenerateDart3(input: Input_GenerateDart3): Unit {
        gotInput = input
    }
    override fun execute_GenerateDocs(input: Input_GenerateDocs): Unit {
        gotInput = input
    }
    override fun execute_GenerateGolang(input: Input_GenerateGolang): Unit {
        gotInput = input
    }
    override fun execute_GenerateKotlin(input: Input_GenerateKotlin): Unit {
        gotInput = input
    }
    override fun execute_GeneratePython3(input: Input_GeneratePython3): Unit {
        gotInput = input
    }
    override fun execute_GenerateTypescript(input: Input_GenerateTypescript): Unit {
        gotInput = input
    }
    override fun execute_Version(input: Input_Version): Unit {
        gotInput = input
    }
    
}

class Test_execute {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "-help=0",
                    "--",
                ),
                wantInput = Input(
                    opt_Help = false,
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    
                    "--",
                ),
                wantInput = Input(
                    opt_Help = false,
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "-h=0",
                    "--",
                ),
                wantInput = Input(
                    opt_Help = false,
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "-help=0",
                    "--",
                ),
                wantInput = Input(
                    opt_Help = false,
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "-help=0",
                    "--",
                ),
                wantInput = Input(
                    opt_Help = false,
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "-help=0",
                    "--",
                ),
                wantInput = Input(
                    opt_Help = false,
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input
            val want = tc.wantInput
            
            assertEquals(want.opt_Help, got.opt_Help, "unexpected input for option: -help")
            
        }
    }
}
class Test_execute_Generate {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_Generate)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "generate", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_Generate(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "generate", 
                    "--",
                ),
                wantInput = Input_Generate(
                    opt_Help = false,
                    opt_OutPath = "",
                    opt_SchemaPath = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "generate", "-h=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_Generate(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "generate", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_Generate(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "generate", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_Generate(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "generate", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_Generate(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_Generate
            val want = tc.wantInput
            
            assertEquals(want.opt_Help, got.opt_Help, "unexpected input for option: -help")
            assertEquals(want.opt_OutPath, got.opt_OutPath, "unexpected input for option: -out-path")
            assertEquals(want.opt_SchemaPath, got.opt_SchemaPath, "unexpected input for option: -schema-path")
            
        }
    }
}
class Test_execute_GenerateDart3 {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_GenerateDart3)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "generate", "dart3", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateDart3(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "generate", "dart3", 
                    "--",
                ),
                wantInput = Input_GenerateDart3(
                    opt_Help = false,
                    opt_OutPath = "",
                    opt_SchemaPath = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "generate", "dart3", "-h=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateDart3(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "generate", "dart3", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateDart3(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "generate", "dart3", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateDart3(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "generate", "dart3", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateDart3(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_GenerateDart3
            val want = tc.wantInput
            
            assertEquals(want.opt_Help, got.opt_Help, "unexpected input for option: -help")
            assertEquals(want.opt_OutPath, got.opt_OutPath, "unexpected input for option: -out-path")
            assertEquals(want.opt_SchemaPath, got.opt_SchemaPath, "unexpected input for option: -schema-path")
            
        }
    }
}
class Test_execute_GenerateDocs {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_GenerateDocs)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "generate", "docs", "-format=0","-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateDocs(
                    opt_Format = "0",
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "generate", "docs", 
                    "--",
                ),
                wantInput = Input_GenerateDocs(
                    opt_Format = "text",
                    opt_Help = false,
                    opt_OutPath = "",
                    opt_SchemaPath = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "generate", "docs", "-f=0","-h=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateDocs(
                    opt_Format = "0",
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "generate", "docs", "-format=0","-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateDocs(
                    opt_Format = "0",
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "generate", "docs", "-format=0","-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateDocs(
                    opt_Format = "0",
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "generate", "docs", "-format=0","-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateDocs(
                    opt_Format = "0",
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_GenerateDocs
            val want = tc.wantInput
            
            assertEquals(want.opt_Format, got.opt_Format, "unexpected input for option: -format")
            assertEquals(want.opt_Help, got.opt_Help, "unexpected input for option: -help")
            assertEquals(want.opt_OutPath, got.opt_OutPath, "unexpected input for option: -out-path")
            assertEquals(want.opt_SchemaPath, got.opt_SchemaPath, "unexpected input for option: -schema-path")
            
        }
    }
}
class Test_execute_GenerateGolang {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_GenerateGolang)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "generate", "golang", "-help=0","-out-path=0","-package=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateGolang(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_Package = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "generate", "golang", 
                    "--",
                ),
                wantInput = Input_GenerateGolang(
                    opt_Help = false,
                    opt_OutPath = "",
                    opt_Package = "main",
                    opt_SchemaPath = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "generate", "golang", "-h=0","-out-path=0","-package=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateGolang(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_Package = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "generate", "golang", "-help=0","-out-path=0","-package=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateGolang(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_Package = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "generate", "golang", "-help=0","-out-path=0","-package=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateGolang(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_Package = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "generate", "golang", "-help=0","-out-path=0","-package=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateGolang(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_Package = "0",
                    opt_SchemaPath = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_GenerateGolang
            val want = tc.wantInput
            
            assertEquals(want.opt_Help, got.opt_Help, "unexpected input for option: -help")
            assertEquals(want.opt_OutPath, got.opt_OutPath, "unexpected input for option: -out-path")
            assertEquals(want.opt_Package, got.opt_Package, "unexpected input for option: -package")
            assertEquals(want.opt_SchemaPath, got.opt_SchemaPath, "unexpected input for option: -schema-path")
            
        }
    }
}
class Test_execute_GenerateKotlin {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_GenerateKotlin)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "generate", "kotlin", "-help=0","-out-path=0","-package=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateKotlin(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_Package = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "generate", "kotlin", 
                    "--",
                ),
                wantInput = Input_GenerateKotlin(
                    opt_Help = false,
                    opt_OutPath = "",
                    opt_Package = "",
                    opt_SchemaPath = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "generate", "kotlin", "-h=0","-out-path=0","-package=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateKotlin(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_Package = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "generate", "kotlin", "-help=0","-out-path=0","-package=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateKotlin(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_Package = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "generate", "kotlin", "-help=0","-out-path=0","-package=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateKotlin(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_Package = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "generate", "kotlin", "-help=0","-out-path=0","-package=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateKotlin(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_Package = "0",
                    opt_SchemaPath = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_GenerateKotlin
            val want = tc.wantInput
            
            assertEquals(want.opt_Help, got.opt_Help, "unexpected input for option: -help")
            assertEquals(want.opt_OutPath, got.opt_OutPath, "unexpected input for option: -out-path")
            assertEquals(want.opt_Package, got.opt_Package, "unexpected input for option: -package")
            assertEquals(want.opt_SchemaPath, got.opt_SchemaPath, "unexpected input for option: -schema-path")
            
        }
    }
}
class Test_execute_GeneratePython3 {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_GeneratePython3)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "generate", "python3", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GeneratePython3(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "generate", "python3", 
                    "--",
                ),
                wantInput = Input_GeneratePython3(
                    opt_Help = false,
                    opt_OutPath = "",
                    opt_SchemaPath = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "generate", "python3", "-h=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GeneratePython3(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "generate", "python3", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GeneratePython3(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "generate", "python3", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GeneratePython3(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "generate", "python3", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GeneratePython3(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_GeneratePython3
            val want = tc.wantInput
            
            assertEquals(want.opt_Help, got.opt_Help, "unexpected input for option: -help")
            assertEquals(want.opt_OutPath, got.opt_OutPath, "unexpected input for option: -out-path")
            assertEquals(want.opt_SchemaPath, got.opt_SchemaPath, "unexpected input for option: -schema-path")
            
        }
    }
}
class Test_execute_GenerateTypescript {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_GenerateTypescript)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "generate", "typescript", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateTypescript(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "generate", "typescript", 
                    "--",
                ),
                wantInput = Input_GenerateTypescript(
                    opt_Help = false,
                    opt_OutPath = "",
                    opt_SchemaPath = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "generate", "typescript", "-h=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateTypescript(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "generate", "typescript", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateTypescript(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "generate", "typescript", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateTypescript(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "generate", "typescript", "-help=0","-out-path=0","-schema-path=0",
                    "--",
                ),
                wantInput = Input_GenerateTypescript(
                    opt_Help = false,
                    opt_OutPath = "0",
                    opt_SchemaPath = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_GenerateTypescript
            val want = tc.wantInput
            
            assertEquals(want.opt_Help, got.opt_Help, "unexpected input for option: -help")
            assertEquals(want.opt_OutPath, got.opt_OutPath, "unexpected input for option: -out-path")
            assertEquals(want.opt_SchemaPath, got.opt_SchemaPath, "unexpected input for option: -schema-path")
            
        }
    }
}
class Test_execute_Version {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_Version)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "version", "-help=0",
                    "--",
                ),
                wantInput = Input_Version(
                    opt_Help = false,
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "version", 
                    "--",
                ),
                wantInput = Input_Version(
                    opt_Help = false,
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "version", "-h=0",
                    "--",
                ),
                wantInput = Input_Version(
                    opt_Help = false,
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "version", "-help=0",
                    "--",
                ),
                wantInput = Input_Version(
                    opt_Help = false,
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "version", "-help=0",
                    "--",
                ),
                wantInput = Input_Version(
                    opt_Help = false,
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "version", "-help=0",
                    "--",
                ),
                wantInput = Input_Version(
                    opt_Help = false,
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_Version
            val want = tc.wantInput
            
            assertEquals(want.opt_Help, got.opt_Help, "unexpected input for option: -help")
            
        }
    }
}
