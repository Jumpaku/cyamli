// Code generated by cyamli, DO NOT EDIT.
package demo

import demo.*
import kotlin.test.*

class CLIHandlerMock : CLIHandler {
    var gotInput: Any? = null
    override fun execute(input: Input): Unit {
        gotInput = input
    }
    override fun execute_Data(input: Input_Data): Unit {
        gotInput = input
    }
    override fun execute_Schema(input: Input_Schema): Unit {
        gotInput = input
    }
    override fun execute_Tables(input: Input_Tables): Unit {
        gotInput = input
    }
    
}

class Test_execute {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "-config=0",
                    "--",
                ),
                wantInput = Input(
                    opt_Config = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    
                    "--",
                ),
                wantInput = Input(
                    opt_Config = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "-config=0",
                    "--",
                ),
                wantInput = Input(
                    opt_Config = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "-config=0",
                    "--",
                ),
                wantInput = Input(
                    opt_Config = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "-config=0",
                    "--",
                ),
                wantInput = Input(
                    opt_Config = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "-config=0",
                    "--",
                ),
                wantInput = Input(
                    opt_Config = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input
            val want = tc.wantInput
            
            assertEquals(want.opt_Config, got.opt_Config, "unexpected input for option: -config")
            
        }
    }
}
class Test_execute_Data {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_Data)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "data", "-config=0","-where=0",
                    "--","0",
                ),
                wantInput = Input_Data(
                    opt_Config = "0",
                    opt_Where = "0",
                    arg_Table = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "data", 
                    "--","0",
                ),
                wantInput = Input_Data(
                    opt_Config = "",
                    opt_Where = "",
                    arg_Table = "0",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "data", "-config=0","-where=0",
                    "--","0",
                ),
                wantInput = Input_Data(
                    opt_Config = "0",
                    opt_Where = "0",
                    arg_Table = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "data", "-config=0","-where=0",
                    "--","0",
                ),
                wantInput = Input_Data(
                    opt_Config = "0",
                    opt_Where = "0",
                    arg_Table = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "data", "-config=0","-where=0",
                    "--","0",
                ),
                wantInput = Input_Data(
                    opt_Config = "0",
                    opt_Where = "0",
                    arg_Table = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "data", "-config=0","-where=0",
                    "--","0",
                ),
                wantInput = Input_Data(
                    opt_Config = "0",
                    opt_Where = "0",
                    arg_Table = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_Data
            val want = tc.wantInput
            
            assertEquals(want.opt_Config, got.opt_Config, "unexpected input for option: -config")
            assertEquals(want.opt_Where, got.opt_Where, "unexpected input for option: -where")
            
            assertEquals(want.arg_Table, got.arg_Table, "unexpected input for argument: table")
        }
    }
}
class Test_execute_Schema {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_Schema)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "schema", "-config=0",
                    "--","0",
                ),
                wantInput = Input_Schema(
                    opt_Config = "0",
                    arg_Table = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "schema", 
                    "--","0",
                ),
                wantInput = Input_Schema(
                    opt_Config = "",
                    arg_Table = "0",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "schema", "-config=0",
                    "--","0",
                ),
                wantInput = Input_Schema(
                    opt_Config = "0",
                    arg_Table = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "schema", "-config=0",
                    "--","0",
                ),
                wantInput = Input_Schema(
                    opt_Config = "0",
                    arg_Table = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "schema", "-config=0",
                    "--","0",
                ),
                wantInput = Input_Schema(
                    opt_Config = "0",
                    arg_Table = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "schema", "-config=0",
                    "--","0",
                ),
                wantInput = Input_Schema(
                    opt_Config = "0",
                    arg_Table = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_Schema
            val want = tc.wantInput
            
            assertEquals(want.opt_Config, got.opt_Config, "unexpected input for option: -config")
            
            assertEquals(want.arg_Table, got.arg_Table, "unexpected input for argument: table")
        }
    }
}
class Test_execute_Tables {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_Tables)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "tables", "-config=0",
                    "--",
                ),
                wantInput = Input_Tables(
                    opt_Config = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "tables", 
                    "--",
                ),
                wantInput = Input_Tables(
                    opt_Config = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "tables", "-config=0",
                    "--",
                ),
                wantInput = Input_Tables(
                    opt_Config = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "tables", "-config=0",
                    "--",
                ),
                wantInput = Input_Tables(
                    opt_Config = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "tables", "-config=0",
                    "--",
                ),
                wantInput = Input_Tables(
                    opt_Config = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "tables", "-config=0",
                    "--",
                ),
                wantInput = Input_Tables(
                    opt_Config = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_Tables
            val want = tc.wantInput
            
            assertEquals(want.opt_Config, got.opt_Config, "unexpected input for option: -config")
            
        }
    }
}
