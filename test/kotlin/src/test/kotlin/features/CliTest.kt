// Code generated by cyamli, DO NOT EDIT.
package features

import features.*
import kotlin.test.*

class CLIHandlerMock : CLIHandler {
    var gotInput: Any? = null
    override fun execute(input: Input): Unit {
        gotInput = input
    }
    override fun execute_Sub1(input: Input_Sub1): Unit {
        gotInput = input
    }
    override fun execute_Sub1Sub2(input: Input_Sub1Sub2): Unit {
        gotInput = input
    }
    override fun execute_Sub1Sub2Sub3(input: Input_Sub1Sub2Sub3): Unit {
        gotInput = input
    }
    
}

class Test_execute {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "-negation-option=0","-option=0","-propagation-option=0","-repeatable-option=0",
                    "--","0","0","0",
                ),
                wantInput = Input(
                    opt_NegationOption = false,
                    opt_Option = 0,
                    opt_PropagationOption = "0",
                    opt_RepeatableOption = "0",
                    arg_FirstArg = false,
                    arg_SecondArg = 0,
                    arg_ThirdArg = listOf("0"),
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    
                    "--","0","0","0",
                ),
                wantInput = Input(
                    opt_NegationOption = false,
                    opt_Option = 123L,
                    opt_PropagationOption = "",
                    opt_RepeatableOption = "",
                    arg_FirstArg = false,
                    arg_SecondArg = 0,
                    arg_ThirdArg = listOf("0"),
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "-negation-option=0","-o=0","-propagation-option=0","-repeatable-option=0",
                    "--","0","0","0",
                ),
                wantInput = Input(
                    opt_NegationOption = false,
                    opt_Option = 0,
                    opt_PropagationOption = "0",
                    opt_RepeatableOption = "0",
                    arg_FirstArg = false,
                    arg_SecondArg = 0,
                    arg_ThirdArg = listOf("0"),
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "-no-negation-option=1","-option=0","-propagation-option=0","-repeatable-option=0",
                    "--","0","0","0",
                ),
                wantInput = Input(
                    opt_NegationOption = false,
                    opt_Option = 0,
                    opt_PropagationOption = "0",
                    opt_RepeatableOption = "0",
                    arg_FirstArg = false,
                    arg_SecondArg = 0,
                    arg_ThirdArg = listOf("0"),
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "-no-negation-option=1","-option=0","-propagation-option=0","-repeatable-option=0",
                    "--","0","0",
                ),
                wantInput = Input(
                    opt_NegationOption = false,
                    opt_Option = 0,
                    opt_PropagationOption = "0",
                    opt_RepeatableOption = "0",
                    arg_FirstArg = false,
                    arg_SecondArg = 0,
                    arg_ThirdArg = listOf(),
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "-no-negation-option=1","-option=0","-propagation-option=0","-repeatable-option=0",
                    "--","0","0","0", "0",
                ),
                wantInput = Input(
                    opt_NegationOption = false,
                    opt_Option = 0,
                    opt_PropagationOption = "0",
                    opt_RepeatableOption = "0",
                    arg_FirstArg = false,
                    arg_SecondArg = 0,
                    arg_ThirdArg = listOf("0", "0"),
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input
            val want = tc.wantInput
            
            assertEquals(want.opt_NegationOption, got.opt_NegationOption, "unexpected input for option: -negation-option")
            assertEquals(want.opt_Option, got.opt_Option, "unexpected input for option: -option")
            assertEquals(want.opt_PropagationOption, got.opt_PropagationOption, "unexpected input for option: -propagation-option")
            assertEquals(want.opt_RepeatableOption, got.opt_RepeatableOption, "unexpected input for option: -repeatable-option")
            
            assertEquals(want.arg_FirstArg, got.arg_FirstArg, "unexpected input for argument: first_arg")
            assertEquals(want.arg_SecondArg, got.arg_SecondArg, "unexpected input for argument: second_arg")
            assertEquals(want.arg_ThirdArg, got.arg_ThirdArg, "unexpected input for argument: third_arg")
        }
    }
}
class Test_execute_Sub1 {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_Sub1)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "sub1", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "sub1", 
                    "--",
                ),
                wantInput = Input_Sub1(
                    opt_PropagationOption = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "sub1", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "sub1", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "sub1", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "sub1", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1(
                    opt_PropagationOption = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_Sub1
            val want = tc.wantInput
            
            assertEquals(want.opt_PropagationOption, got.opt_PropagationOption, "unexpected input for option: -propagation-option")
            
        }
    }
}
class Test_execute_Sub1Sub2 {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_Sub1Sub2)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "sub1", "sub2", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1Sub2(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "sub1", "sub2", 
                    "--",
                ),
                wantInput = Input_Sub1Sub2(
                    opt_PropagationOption = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "sub1", "sub2", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1Sub2(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "sub1", "sub2", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1Sub2(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "sub1", "sub2", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1Sub2(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "sub1", "sub2", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1Sub2(
                    opt_PropagationOption = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_Sub1Sub2
            val want = tc.wantInput
            
            assertEquals(want.opt_PropagationOption, got.opt_PropagationOption, "unexpected input for option: -propagation-option")
            
        }
    }
}
class Test_execute_Sub1Sub2Sub3 {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: Input_Sub1Sub2Sub3)
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    "sub1", "sub2", "sub3", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1Sub2Sub3(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    "sub1", "sub2", "sub3", 
                    "--",
                ),
                wantInput = Input_Sub1Sub2Sub3(
                    opt_PropagationOption = "",
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    "sub1", "sub2", "sub3", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1Sub2Sub3(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    "sub1", "sub2", "sub3", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1Sub2Sub3(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    "sub1", "sub2", "sub3", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1Sub2Sub3(
                    opt_PropagationOption = "0",
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    "sub1", "sub2", "sub3", "-propagation-option=0",
                    "--",
                ),
                wantInput = Input_Sub1Sub2Sub3(
                    opt_PropagationOption = "0",
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as Input_Sub1Sub2Sub3
            val want = tc.wantInput
            
            assertEquals(want.opt_PropagationOption, got.opt_PropagationOption, "unexpected input for option: -propagation-option")
            
        }
    }
}
