<?php
// Code generated by cyamli, DO NOT EDIT.

namespace Cyamli\cyamli;

/**
 * Class Input_GeneratePython3
 *
 * @property bool $Opt_Help 
 * @property string $Opt_OutPath 
 * @property string $Opt_SchemaPath 
 *
 *
 * @property string[] $Subcommand
 * @property string[] $Options
 * @property string[] $Arguments
 * @property string $ErrorMessage
 */
class Input_GeneratePython3 {
    /** @var bool */
    public bool $Opt_Help;
    /** @var string */
    public string $Opt_OutPath;
    /** @var string */
    public string $Opt_SchemaPath;
    /** @var string[] */
    public array $Subcommand = [];
    /** @var string[] */
    public array $Options = [];
    /** @var string[] */
    public array $Arguments = [];
    /** @var string */
    public string $ErrorMessage = '';

    /**
     * @param string[] $subcommand
     * @param string[] $options
     * @param string[] $arguments
     */
    public function resolveInput(array $subcommand, array $options, array $arguments): void {
        $this->Opt_Help = false;
        $this->Opt_OutPath = "";
        $this->Opt_SchemaPath = "";
        $this->Subcommand = $subcommand;
        $this->Options = $options;
        $this->Arguments = $arguments;
        $this->ErrorMessage = '';
        foreach ($this->Options as $arg) {
            $cut = strpos($arg, '=');
            $optName = $cut !== false ? substr($arg, 0, $cut) : $arg;
            $lit = $cut !== false ? substr($arg, $cut + 1) : '';
            switch ($optName) {
                case '-help':
                case '-h':
                    if ($cut === false) {
                        $lit = 'true';
                    }
                    $v = self::parseValue('bool', $lit);
                    if ($v === null) {
                        $this->ErrorMessage = "value '$lit' is not assignable to option '$optName'";
                        return;
                    }
                    $this->Opt_Help = $v;
                    break;
                
                
                case '-out-path':
                    if ($cut === false) {
                        $this->ErrorMessage = "value is not specified to option '$optName'";
                        return;
                    }
                    $v = self::parseValue('string', $lit);
                    if ($v === null) {
                        $this->ErrorMessage = "value '$lit' is not assignable to option '$optName'";
                        return;
                    }
                    $this->Opt_OutPath = $v;
                    break;
                
                
                case '-schema-path':
                    if ($cut === false) {
                        $this->ErrorMessage = "value is not specified to option '$optName'";
                        return;
                    }
                    $v = self::parseValue('string', $lit);
                    if ($v === null) {
                        $this->ErrorMessage = "value '$lit' is not assignable to option '$optName'";
                        return;
                    }
                    $this->Opt_SchemaPath = $v;
                    break;
                
                
                default:
                    $this->ErrorMessage = "unknown option '$optName'";
                    return;
            }
        }
        $expectedArgs = 0;
        
    }

    /**
     * @param string $typ
     * @param string ...$strValue
     * @return mixed|null
     */
    private static function parseValue(string $typ, ...$strValue) {
        switch ($typ) {
            case 'bool[]':
                $val = [];
                foreach ($strValue as $str) {
                    $v = self::parseValue('bool', $str);
                    if ($v === null) return null;
                    $val[] = $v;
                }
                return $val;
            case 'int[]':
                $val = [];
                foreach ($strValue as $str) {
                    $v = self::parseValue('int64', $str);
                    if ($v === null) return null;
                    $val[] = $v;
                }
                return $val;
            case 'string[]':
                $val = [];
                foreach ($strValue as $str) {
                    $v = self::parseValue('string', $str);
                    if ($v === null) return null;
                    $val[] = $v;
                }
                return $val;
            case 'bool':
                $s = strtolower($strValue[0]);
                if (in_array($s, ['true', '1', 't'], true)) return true;
                if (in_array($s, ['false', '0', 'f'], true)) return false;
                return null;
            case 'int':
                if (is_numeric($strValue[0])) return (int)$strValue[0];
                return null;
            case 'string':
                return $strValue[0];
        }
        return null;
    }
}
