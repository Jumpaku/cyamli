<?php
// Code generated by cyamli, DO NOT EDIT.

namespace Cyamli\demo;

class Cyamli {

    /**
     * Entry point
     * @param CLIHandler $handler
     * @param string[] $args
     */
    public static function Run(CLIHandler $handler, array $args): void {
        [$subcommandPath, $options, $arguments] = self::resolveArgs($args);
        switch (implode(' ', $subcommandPath)) {
            case "":
                $input = new Input();
                $input->resolveInput($subcommandPath, $options, $arguments);
                $handler->Run($input);
                break;
            case "data":
                $input = new Input_Data();
                $input->resolveInput($subcommandPath, $options, $arguments);
                $handler->Run_Data($input);
                break;
            case "schema":
                $input = new Input_Schema();
                $input->resolveInput($subcommandPath, $options, $arguments);
                $handler->Run_Schema($input);
                break;
            case "tables":
                $input = new Input_Tables();
                $input->resolveInput($subcommandPath, $options, $arguments);
                $handler->Run_Tables($input);
                break;
        }
    }

    public static function GetVersion(): string {
        return "";
    }
    public static function GetProgram(): string {
        return "demo";
    }
    public static function GetDoc(array $subcommands): string {
        switch (implode(' ', $subcommands)) {
            case "":
                return "demo \n\n    Syntax:\n        $ demo  [<option>]...\n\n    Options:\n        -config=<string>  (default=\"\"):\n            path to the config file.\n\n    Subcommands:\n        data:\n            dump data from the specified table from the database.\n\n        schema:\n            fetch schema of the specified table from the database.\n\n        tables:\n            list tables from the database.\n\n\n";
        
            case "data":
                return "demo data\n\n    Description:\n        dump data from the specified table from the database.\n\n    Syntax:\n        $ demo data [<option>|<argument>]... [-- [<argument>]...]\n\n    Options:\n        -config=<string>  (default=\"\"):\n            path to the config file.\n\n        -where=<string>  (default=\"\"):\n            filter data by the condition.\n\n    Arguments:\n        1.  <table:string>\n\n\n";
        
            case "schema":
                return "demo schema\n\n    Description:\n        fetch schema of the specified table from the database.\n\n    Syntax:\n        $ demo schema [<option>|<argument>]... [-- [<argument>]...]\n\n    Options:\n        -config=<string>  (default=\"\"):\n            path to the config file.\n\n    Arguments:\n        1.  <table:string>\n\n\n";
        
            case "tables":
                return "demo tables\n\n    Description:\n        list tables from the database.\n\n    Syntax:\n        $ demo tables [<option>]...\n\n    Options:\n        -config=<string>  (default=\"\"):\n            path to the config file.\n\n\n";
        
            default:
                throw new \RuntimeException('invalid subcommands: ' . implode(', ', $subcommands));
        }
    }

    /**
     * @param string[] $args
     * @return array{0: string[], 1: string[], 2: string[]}
     */
    private static function resolveArgs(array $args): array {
        if (count($args) === 0) {
            throw new \RuntimeException('command line arguments are too few');
        }
        $subcommandSet = [
            "" => true,"data" => true,"schema" => true,"tables" => true,
        ];
        $subcommandPath = [];
        $options = [];
        $arguments = [];
        for ($i = 1; $i < count($args); ++$i) {
            if ($args[$i] === '--') break;
            $pathLiteral = implode(' ', array_merge($subcommandPath, [$args[$i]]));
            if (!isset($subcommandSet[$pathLiteral])) break;
            $subcommandPath[] = $args[$i];
        }
        $restArgs = array_slice($args, 1 + count($subcommandPath));
        foreach ($restArgs as $idx => $arg) {
            if ($arg === '--') {
                $arguments = array_merge($arguments, array_slice($restArgs, $idx + 1));
                break;
            }
            if (strpos($arg, '-') === 0) {
                $options[] = $arg;
            } else {
                $arguments[] = $arg;
            }
        }
        return [$subcommandPath, $options, $arguments];
    }

}