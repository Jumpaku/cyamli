<?php
// Code generated by cyamli, DO NOT EDIT.

namespace Cyamli\features;

class Cyamli {

    /**
     * Entry point
     * @param CLIHandler $handler
     * @param string[] $args
     */
    public static function Run(CLIHandler $handler, array $args): void {
        [$subcommandPath, $options, $arguments] = self::resolveArgs($args);
        switch (implode(' ', $subcommandPath)) {
            case "":
                $input = new Input();
                $input->resolveInput($subcommandPath, $options, $arguments);
                $handler->Run($input);
                break;
            case "sub1":
                $input = new Input_Sub1();
                $input->resolveInput($subcommandPath, $options, $arguments);
                $handler->Run_Sub1($input);
                break;
            case "sub1 sub2":
                $input = new Input_Sub1Sub2();
                $input->resolveInput($subcommandPath, $options, $arguments);
                $handler->Run_Sub1Sub2($input);
                break;
            case "sub1 sub2 sub3":
                $input = new Input_Sub1Sub2Sub3();
                $input->resolveInput($subcommandPath, $options, $arguments);
                $handler->Run_Sub1Sub2Sub3($input);
                break;
        }
    }

    public static function GetVersion(): string {
        return "1.2.3";
    }
    public static function GetProgram(): string {
        return "features";
    }
    public static function GetDoc(array $subcommands): string {
        switch (implode(' ', $subcommands)) {
            case "":
                return "features \n\n    Description:\n        This is root command, which is a command with name and version.\n\n    Syntax:\n        $ features  [<option>|<argument>]... [-- [<argument>]...]\n\n    Options:\n        -negation-option[=<boolean>]  (default=false),\n        -no-negation-option[=<boolean>]:\n            this option's negated version `-no-negation-option` can be available.\n\n        -option=<integer>, -o=<integer>  (default=123):\n            option can have:\n              a description,\n              a type of string, integer, or boolean,\n              a short name,\n              and a default value.\n\n        -propagation-option=<string>  (default=\"\"):\n            this option is available with the descendant commands.\n\n        -repeatable-option=<string>  (default=\"\"):\n            this option can be repeated multiple times.\n\n    Arguments:\n        1.  <first_arg:boolean>\n            first argument with type boolean\n\n        2.  <second_arg:integer>\n            second argument with type boolean\n\n        3. [<third_arg:string>]...\n            third argument, which can take multiple values.\n\n    Subcommands:\n        sub1:\n            this is a child command.\n\n\n";
        
            case "sub1":
                return "features sub1\n\n    Description:\n        this is a child command.\n\n    Syntax:\n        $ features sub1 [<option>]...\n\n    Options:\n        -propagation-option=<string>  (default=\"\"):\n            this option is available with the descendant commands.\n\n    Subcommands:\n        sub2:\n            this is a grandchild command.\n\n\n";
        
            case "sub1 sub2":
                return "features sub1 sub2\n\n    Description:\n        this is a grandchild command.\n\n    Syntax:\n        $ features sub1 sub2 [<option>]...\n\n    Options:\n        -propagation-option=<string>  (default=\"\"):\n            this option is available with the descendant commands.\n\n    Subcommands:\n        sub3:\n            this is a great-grandchild command.\n\n\n";
        
            case "sub1 sub2 sub3":
                return "features sub1 sub2 sub3\n\n    Description:\n        this is a great-grandchild command.\n\n    Syntax:\n        $ features sub1 sub2 sub3 [<option>]...\n\n    Options:\n        -propagation-option=<string>  (default=\"\"):\n            this option is available with the descendant commands.\n\n\n";
        
            default:
                throw new \RuntimeException('invalid subcommands: ' . implode(', ', $subcommands));
        }
    }

    /**
     * @param string[] $args
     * @return array{0: string[], 1: string[], 2: string[]}
     */
    private static function resolveArgs(array $args): array {
        if (count($args) === 0) {
            throw new \RuntimeException('command line arguments are too few');
        }
        $subcommandSet = [
            "" => true,"sub1" => true,"sub1 sub2" => true,"sub1 sub2 sub3" => true,
        ];
        $subcommandPath = [];
        $options = [];
        $arguments = [];
        for ($i = 1; $i < count($args); ++$i) {
            if ($args[$i] === '--') break;
            $pathLiteral = implode(' ', array_merge($subcommandPath, [$args[$i]]));
            if (!isset($subcommandSet[$pathLiteral])) break;
            $subcommandPath[] = $args[$i];
        }
        $restArgs = array_slice($args, 1 + count($subcommandPath));
        foreach ($restArgs as $idx => $arg) {
            if ($arg === '--') {
                $arguments = array_merge($arguments, array_slice($restArgs, $idx + 1));
                break;
            }
            if (strpos($arg, '-') === 0) {
                $options[] = $arg;
            } else {
                $arguments[] = $arg;
            }
        }
        return [$subcommandPath, $options, $arguments];
    }

}