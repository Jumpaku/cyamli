# Code generated by cyamli, DO NOT EDIT.
import unittest
from cyamli.cli_gen import CLIHandler, run, Input, Input_Generate, Input_GenerateDart3, Input_GenerateDocs, Input_GenerateGolang, Input_GenerateKotlin, Input_GeneratePython3, Input_GenerateTypescript, Input_Version

class CLIHandlerMock(CLIHandler):
    def __init__(self):
        self.got_input = None


    def Run(self, input):
        self.got_input = input
        return None

    def Run_Generate(self, input):
        self.got_input = input
        return None

    def Run_GenerateDart3(self, input):
        self.got_input = input
        return None

    def Run_GenerateDocs(self, input):
        self.got_input = input
        return None

    def Run_GenerateGolang(self, input):
        self.got_input = input
        return None

    def Run_GenerateKotlin(self, input):
        self.got_input = input
        return None

    def Run_GeneratePython3(self, input):
        self.got_input = input
        return None

    def Run_GenerateTypescript(self, input):
        self.got_input = input
        return None

    def Run_Version(self, input):
        self.got_input = input
        return None



def initAttrs(obj, attrs) -> object:
    for attr, value in attrs.items():
        setattr(obj, attr, value)
    return obj

class TestRun(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 
                    '-help=0',
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Help": False,
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Help": False,
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 
                    '-h=0',
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Help": False,
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 
                    '-help=0',
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Help": False,
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 
                    '-help=0',
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Help": False,
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 
                    '-help=0',
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Help": False,
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Help, got.Opt_Help, f"unexpected input for option: -help")
                

class TestRun_Generate(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'generate', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Generate(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'generate', 
                    '--',
                ],
                'want_input': initAttrs(Input_Generate(), {
                    "Opt_Help": False,
                    "Opt_OutPath": "",
                    "Opt_SchemaPath": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'generate', 
                    '-h=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Generate(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'generate', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Generate(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'generate', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Generate(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'generate', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Generate(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Help, got.Opt_Help, f"unexpected input for option: -help")
                self.assertEqual(want.Opt_OutPath, got.Opt_OutPath, f"unexpected input for option: -out-path")
                self.assertEqual(want.Opt_SchemaPath, got.Opt_SchemaPath, f"unexpected input for option: -schema-path")
                

class TestRun_GenerateDart3(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'generate', 'dart3', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDart3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'generate', 'dart3', 
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDart3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": "",
                    "Opt_SchemaPath": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'generate', 'dart3', 
                    '-h=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDart3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'generate', 'dart3', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDart3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'generate', 'dart3', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDart3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'generate', 'dart3', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDart3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Help, got.Opt_Help, f"unexpected input for option: -help")
                self.assertEqual(want.Opt_OutPath, got.Opt_OutPath, f"unexpected input for option: -out-path")
                self.assertEqual(want.Opt_SchemaPath, got.Opt_SchemaPath, f"unexpected input for option: -schema-path")
                

class TestRun_GenerateDocs(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'generate', 'docs', 
                    '-format=0',
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDocs(), {
                    "Opt_Format": '0',
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'generate', 'docs', 
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDocs(), {
                    "Opt_Format": "text",
                    "Opt_Help": False,
                    "Opt_OutPath": "",
                    "Opt_SchemaPath": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'generate', 'docs', 
                    '-f=0',
                    '-h=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDocs(), {
                    "Opt_Format": '0',
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'generate', 'docs', 
                    '-format=0',
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDocs(), {
                    "Opt_Format": '0',
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'generate', 'docs', 
                    '-format=0',
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDocs(), {
                    "Opt_Format": '0',
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'generate', 'docs', 
                    '-format=0',
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateDocs(), {
                    "Opt_Format": '0',
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Format, got.Opt_Format, f"unexpected input for option: -format")
                self.assertEqual(want.Opt_Help, got.Opt_Help, f"unexpected input for option: -help")
                self.assertEqual(want.Opt_OutPath, got.Opt_OutPath, f"unexpected input for option: -out-path")
                self.assertEqual(want.Opt_SchemaPath, got.Opt_SchemaPath, f"unexpected input for option: -schema-path")
                

class TestRun_GenerateGolang(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'generate', 'golang', 
                    '-help=0',
                    '-out-path=0',
                    '-package=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateGolang(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_Package": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'generate', 'golang', 
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateGolang(), {
                    "Opt_Help": False,
                    "Opt_OutPath": "",
                    "Opt_Package": "main",
                    "Opt_SchemaPath": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'generate', 'golang', 
                    '-h=0',
                    '-out-path=0',
                    '-package=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateGolang(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_Package": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'generate', 'golang', 
                    '-help=0',
                    '-out-path=0',
                    '-package=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateGolang(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_Package": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'generate', 'golang', 
                    '-help=0',
                    '-out-path=0',
                    '-package=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateGolang(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_Package": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'generate', 'golang', 
                    '-help=0',
                    '-out-path=0',
                    '-package=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateGolang(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_Package": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Help, got.Opt_Help, f"unexpected input for option: -help")
                self.assertEqual(want.Opt_OutPath, got.Opt_OutPath, f"unexpected input for option: -out-path")
                self.assertEqual(want.Opt_Package, got.Opt_Package, f"unexpected input for option: -package")
                self.assertEqual(want.Opt_SchemaPath, got.Opt_SchemaPath, f"unexpected input for option: -schema-path")
                

class TestRun_GenerateKotlin(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'generate', 'kotlin', 
                    '-help=0',
                    '-out-path=0',
                    '-package=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateKotlin(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_Package": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'generate', 'kotlin', 
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateKotlin(), {
                    "Opt_Help": False,
                    "Opt_OutPath": "",
                    "Opt_Package": "",
                    "Opt_SchemaPath": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'generate', 'kotlin', 
                    '-h=0',
                    '-out-path=0',
                    '-package=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateKotlin(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_Package": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'generate', 'kotlin', 
                    '-help=0',
                    '-out-path=0',
                    '-package=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateKotlin(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_Package": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'generate', 'kotlin', 
                    '-help=0',
                    '-out-path=0',
                    '-package=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateKotlin(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_Package": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'generate', 'kotlin', 
                    '-help=0',
                    '-out-path=0',
                    '-package=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateKotlin(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_Package": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Help, got.Opt_Help, f"unexpected input for option: -help")
                self.assertEqual(want.Opt_OutPath, got.Opt_OutPath, f"unexpected input for option: -out-path")
                self.assertEqual(want.Opt_Package, got.Opt_Package, f"unexpected input for option: -package")
                self.assertEqual(want.Opt_SchemaPath, got.Opt_SchemaPath, f"unexpected input for option: -schema-path")
                

class TestRun_GeneratePython3(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'generate', 'python3', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GeneratePython3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'generate', 'python3', 
                    '--',
                ],
                'want_input': initAttrs(Input_GeneratePython3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": "",
                    "Opt_SchemaPath": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'generate', 'python3', 
                    '-h=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GeneratePython3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'generate', 'python3', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GeneratePython3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'generate', 'python3', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GeneratePython3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'generate', 'python3', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GeneratePython3(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Help, got.Opt_Help, f"unexpected input for option: -help")
                self.assertEqual(want.Opt_OutPath, got.Opt_OutPath, f"unexpected input for option: -out-path")
                self.assertEqual(want.Opt_SchemaPath, got.Opt_SchemaPath, f"unexpected input for option: -schema-path")
                

class TestRun_GenerateTypescript(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'generate', 'typescript', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateTypescript(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'generate', 'typescript', 
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateTypescript(), {
                    "Opt_Help": False,
                    "Opt_OutPath": "",
                    "Opt_SchemaPath": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'generate', 'typescript', 
                    '-h=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateTypescript(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'generate', 'typescript', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateTypescript(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'generate', 'typescript', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateTypescript(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'generate', 'typescript', 
                    '-help=0',
                    '-out-path=0',
                    '-schema-path=0',
                    '--',
                ],
                'want_input': initAttrs(Input_GenerateTypescript(), {
                    "Opt_Help": False,
                    "Opt_OutPath": '0',
                    "Opt_SchemaPath": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Help, got.Opt_Help, f"unexpected input for option: -help")
                self.assertEqual(want.Opt_OutPath, got.Opt_OutPath, f"unexpected input for option: -out-path")
                self.assertEqual(want.Opt_SchemaPath, got.Opt_SchemaPath, f"unexpected input for option: -schema-path")
                

class TestRun_Version(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'version', 
                    '-help=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Version(), {
                    "Opt_Help": False,
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'version', 
                    '--',
                ],
                'want_input': initAttrs(Input_Version(), {
                    "Opt_Help": False,
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'version', 
                    '-h=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Version(), {
                    "Opt_Help": False,
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'version', 
                    '-help=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Version(), {
                    "Opt_Help": False,
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'version', 
                    '-help=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Version(), {
                    "Opt_Help": False,
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'version', 
                    '-help=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Version(), {
                    "Opt_Help": False,
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Help, got.Opt_Help, f"unexpected input for option: -help")
                

if __name__ == '__main__':
    unittest.main()
