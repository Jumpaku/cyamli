# Code generated by cyamli, DO NOT EDIT.
import unittest
from demo.cli_gen import CLIHandler, run, Input, Input_Data, Input_Schema, Input_Tables

class CLIHandlerMock(CLIHandler):
    def __init__(self):
        self.got_input = None


    def Run(self, input):
        self.got_input = input
        return None

    def Run_Data(self, input):
        self.got_input = input
        return None

    def Run_Schema(self, input):
        self.got_input = input
        return None

    def Run_Tables(self, input):
        self.got_input = input
        return None



def initAttrs(obj, attrs) -> object:
    for attr, value in attrs.items():
        setattr(obj, attr, value)
    return obj

class TestRun(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 
                    '-config=0',
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Config": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Config": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 
                    '-config=0',
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Config": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 
                    '-config=0',
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Config": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 
                    '-config=0',
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Config": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 
                    '-config=0',
                    '--',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_Config": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Config, got.Opt_Config, f"unexpected input for option: -config")
                

class TestRun_Data(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'data', 
                    '-config=0',
                    '-where=0',
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Data(), {
                    "Opt_Config": '0',
                    "Opt_Where": '0',
                    "Arg_Table": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'data', 
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Data(), {
                    "Opt_Config": "",
                    "Opt_Where": "",
                    "Arg_Table": '0',
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'data', 
                    '-config=0',
                    '-where=0',
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Data(), {
                    "Opt_Config": '0',
                    "Opt_Where": '0',
                    "Arg_Table": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'data', 
                    '-config=0',
                    '-where=0',
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Data(), {
                    "Opt_Config": '0',
                    "Opt_Where": '0',
                    "Arg_Table": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'data', 
                    '-config=0',
                    '-where=0',
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Data(), {
                    "Opt_Config": '0',
                    "Opt_Where": '0',
                    "Arg_Table": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'data', 
                    '-config=0',
                    '-where=0',
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Data(), {
                    "Opt_Config": '0',
                    "Opt_Where": '0',
                    "Arg_Table": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Config, got.Opt_Config, f"unexpected input for option: -config")
                self.assertEqual(want.Opt_Where, got.Opt_Where, f"unexpected input for option: -where")
                
                self.assertEqual(want.Arg_Table, got.Arg_Table, f"unexpected input for argument: table")

class TestRun_Schema(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'schema', 
                    '-config=0',
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Schema(), {
                    "Opt_Config": '0',
                    "Arg_Table": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'schema', 
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Schema(), {
                    "Opt_Config": "",
                    "Arg_Table": '0',
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'schema', 
                    '-config=0',
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Schema(), {
                    "Opt_Config": '0',
                    "Arg_Table": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'schema', 
                    '-config=0',
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Schema(), {
                    "Opt_Config": '0',
                    "Arg_Table": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'schema', 
                    '-config=0',
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Schema(), {
                    "Opt_Config": '0',
                    "Arg_Table": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'schema', 
                    '-config=0',
                    '--',
                    '0',
                ],
                'want_input': initAttrs(Input_Schema(), {
                    "Opt_Config": '0',
                    "Arg_Table": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Config, got.Opt_Config, f"unexpected input for option: -config")
                
                self.assertEqual(want.Arg_Table, got.Arg_Table, f"unexpected input for argument: table")

class TestRun_Tables(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'tables', 
                    '-config=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Tables(), {
                    "Opt_Config": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'tables', 
                    '--',
                ],
                'want_input': initAttrs(Input_Tables(), {
                    "Opt_Config": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'tables', 
                    '-config=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Tables(), {
                    "Opt_Config": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'tables', 
                    '-config=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Tables(), {
                    "Opt_Config": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'tables', 
                    '-config=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Tables(), {
                    "Opt_Config": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'tables', 
                    '-config=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Tables(), {
                    "Opt_Config": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_Config, got.Opt_Config, f"unexpected input for option: -config")
                

if __name__ == '__main__':
    unittest.main()
