# Code generated by cyamli, DO NOT EDIT.
import unittest
from features.cli_gen import CLIHandler, run, Input, Input_Sub1, Input_Sub1Sub2, Input_Sub1Sub2Sub3

class CLIHandlerMock(CLIHandler):
    def __init__(self):
        self.got_input = None


    def Run(self, input):
        self.got_input = input
        return None

    def Run_Sub1(self, input):
        self.got_input = input
        return None

    def Run_Sub1Sub2(self, input):
        self.got_input = input
        return None

    def Run_Sub1Sub2Sub3(self, input):
        self.got_input = input
        return None



def initAttrs(obj, attrs) -> object:
    for attr, value in attrs.items():
        setattr(obj, attr, value)
    return obj

class TestRun(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 
                    '-negation-option=0',
                    '-option=0',
                    '-propagation-option=0',
                    '-repeatable-option=0',
                    '--',
                    '0',
                    '0',
                    '0',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_NegationOption": False,
                    "Opt_Option": 0,
                    "Opt_PropagationOption": '0',
                    "Opt_RepeatableOption": '0',
                    "Arg_FirstArg": False,
                    "Arg_SecondArg": 0,
                    "Arg_ThirdArg": ['0'],
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 
                    '--',
                    '0',
                    '0',
                    '0',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_NegationOption": False,
                    "Opt_Option": 123,
                    "Opt_PropagationOption": "",
                    "Opt_RepeatableOption": "",
                    "Arg_FirstArg": False,
                    "Arg_SecondArg": 0,
                    "Arg_ThirdArg": ['0'],
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 
                    '-negation-option=0',
                    '-o=0',
                    '-propagation-option=0',
                    '-repeatable-option=0',
                    '--',
                    '0',
                    '0',
                    '0',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_NegationOption": False,
                    "Opt_Option": 0,
                    "Opt_PropagationOption": '0',
                    "Opt_RepeatableOption": '0',
                    "Arg_FirstArg": False,
                    "Arg_SecondArg": 0,
                    "Arg_ThirdArg": ['0'],
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 
                    '-no-negation-option=1',
                    '-option=0',
                    '-propagation-option=0',
                    '-repeatable-option=0',
                    '--',
                    '0',
                    '0',
                    '0',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_NegationOption": False,
                    "Opt_Option": 0,
                    "Opt_PropagationOption": '0',
                    "Opt_RepeatableOption": '0',
                    "Arg_FirstArg": False,
                    "Arg_SecondArg": 0,
                    "Arg_ThirdArg": ['0'],
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 
                    '-no-negation-option=1',
                    '-option=0',
                    '-propagation-option=0',
                    '-repeatable-option=0',
                    '--',
                    '0',
                    '0',
                    
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_NegationOption": False,
                    "Opt_Option": 0,
                    "Opt_PropagationOption": '0',
                    "Opt_RepeatableOption": '0',
                    "Arg_FirstArg": False,
                    "Arg_SecondArg": 0,
                    "Arg_ThirdArg": [],
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 
                    '-no-negation-option=1',
                    '-option=0',
                    '-propagation-option=0',
                    '-repeatable-option=0',
                    '--',
                    '0',
                    '0',
                    '0', '0',
                ],
                'want_input': initAttrs(Input(), {
                    "Opt_NegationOption": False,
                    "Opt_Option": 0,
                    "Opt_PropagationOption": '0',
                    "Opt_RepeatableOption": '0',
                    "Arg_FirstArg": False,
                    "Arg_SecondArg": 0,
                    "Arg_ThirdArg": ['0', '0'],
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_NegationOption, got.Opt_NegationOption, f"unexpected input for option: -negation-option")
                self.assertEqual(want.Opt_Option, got.Opt_Option, f"unexpected input for option: -option")
                self.assertEqual(want.Opt_PropagationOption, got.Opt_PropagationOption, f"unexpected input for option: -propagation-option")
                self.assertEqual(want.Opt_RepeatableOption, got.Opt_RepeatableOption, f"unexpected input for option: -repeatable-option")
                
                self.assertEqual(want.Arg_FirstArg, got.Arg_FirstArg, f"unexpected input for argument: first_arg")
                self.assertEqual(want.Arg_SecondArg, got.Arg_SecondArg, f"unexpected input for argument: second_arg")
                self.assertEqual(want.Arg_ThirdArg, got.Arg_ThirdArg, f"unexpected input for argument: third_arg")

class TestRun_Sub1(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'sub1', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'sub1', 
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1(), {
                    "Opt_PropagationOption": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'sub1', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'sub1', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'sub1', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'sub1', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1(), {
                    "Opt_PropagationOption": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_PropagationOption, got.Opt_PropagationOption, f"unexpected input for option: -propagation-option")
                

class TestRun_Sub1Sub2(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'sub1', 'sub2', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'sub1', 'sub2', 
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2(), {
                    "Opt_PropagationOption": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'sub1', 'sub2', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'sub1', 'sub2', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'sub1', 'sub2', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'sub1', 'sub2', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2(), {
                    "Opt_PropagationOption": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_PropagationOption, got.Opt_PropagationOption, f"unexpected input for option: -propagation-option")
                

class TestRun_Sub1Sub2Sub3(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', 'sub1', 'sub2', 'sub3', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2Sub3(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', 'sub1', 'sub2', 'sub3', 
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2Sub3(), {
                    "Opt_PropagationOption": "",
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', 'sub1', 'sub2', 'sub3', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2Sub3(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', 'sub1', 'sub2', 'sub3', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2Sub3(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', 'sub1', 'sub2', 'sub3', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2Sub3(), {
                    "Opt_PropagationOption": '0',
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', 'sub1', 'sub2', 'sub3', 
                    '-propagation-option=0',
                    '--',
                ],
                'want_input': initAttrs(Input_Sub1Sub2Sub3(), {
                    "Opt_PropagationOption": '0',
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                
                self.assertEqual(want.Opt_PropagationOption, got.Opt_PropagationOption, f"unexpected input for option: -propagation-option")
                

if __name__ == '__main__':
    unittest.main()
