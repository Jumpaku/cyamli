// Code generated by cyamli, DO NOT EDIT.
import assert from 'node:assert';
import test from 'node:test';
import { run, CLIHandler, Input, Input_Generate, Input_GenerateDart3, Input_GenerateDocs, Input_GenerateGolang, Input_GenerateKotlin, Input_GeneratePython3, Input_GenerateTypescript, Input_Version } from './cli_gen.js';

class CLIHandlerMock implements CLIHandler {
    public gotInput: any;
    
    async run(input: Input): Promise<void> {
        this.gotInput = input;
    }
    
    async run_Generate(input: Input_Generate): Promise<void> {
        this.gotInput = input;
    }
    
    async run_GenerateDart3(input: Input_GenerateDart3): Promise<void> {
        this.gotInput = input;
    }
    
    async run_GenerateDocs(input: Input_GenerateDocs): Promise<void> {
        this.gotInput = input;
    }
    
    async run_GenerateGolang(input: Input_GenerateGolang): Promise<void> {
        this.gotInput = input;
    }
    
    async run_GenerateKotlin(input: Input_GenerateKotlin): Promise<void> {
        this.gotInput = input;
    }
    
    async run_GeneratePython3(input: Input_GeneratePython3): Promise<void> {
        this.gotInput = input;
    }
    
    async run_GenerateTypescript(input: Input_GenerateTypescript): Promise<void> {
        this.gotInput = input;
    }
    
    async run_Version(input: Input_Version): Promise<void> {
        this.gotInput = input;
    }
    
}


test.describe('run', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                '-help=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
            },
        },
        {
            name: 'default-options',
            args: [
                
                '--',
            ],
            wantInput: {opt_Help: false,
            },
        },
        {
            name: 'short-options',
            args: [
                '-h=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
            },
        },
        {
            name: 'negated-options',
            args: [
                '-help=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                '-help=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                '-help=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
            },
        },
    ];

    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput as Input;
            const want = tc.wantInput;
            
            assert.deepStrictEqual(got.opt_Help, want.opt_Help, `unexpected input for option: -help`);
            
            
        });
    });
});

test.describe('run_Generate', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'generate', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'generate', 
                '--',
            ],
            wantInput: {opt_Help: false,opt_OutPath: "",opt_SchemaPath: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'generate', '-h=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'generate', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'generate', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'generate', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
    ];

    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput as Input_Generate;
            const want = tc.wantInput;
            
            assert.deepStrictEqual(got.opt_Help, want.opt_Help, `unexpected input for option: -help`);
            
            assert.deepStrictEqual(got.opt_OutPath, want.opt_OutPath, `unexpected input for option: -out-path`);
            
            assert.deepStrictEqual(got.opt_SchemaPath, want.opt_SchemaPath, `unexpected input for option: -schema-path`);
            
            
        });
    });
});

test.describe('run_GenerateDart3', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'generate', 'dart3', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'generate', 'dart3', 
                '--',
            ],
            wantInput: {opt_Help: false,opt_OutPath: "",opt_SchemaPath: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'generate', 'dart3', '-h=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'generate', 'dart3', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'generate', 'dart3', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'generate', 'dart3', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
    ];

    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput as Input_GenerateDart3;
            const want = tc.wantInput;
            
            assert.deepStrictEqual(got.opt_Help, want.opt_Help, `unexpected input for option: -help`);
            
            assert.deepStrictEqual(got.opt_OutPath, want.opt_OutPath, `unexpected input for option: -out-path`);
            
            assert.deepStrictEqual(got.opt_SchemaPath, want.opt_SchemaPath, `unexpected input for option: -schema-path`);
            
            
        });
    });
});

test.describe('run_GenerateDocs', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'generate', 'docs', '-format=0','-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Format: '0',
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'generate', 'docs', 
                '--',
            ],
            wantInput: {opt_Format: "text",opt_Help: false,opt_OutPath: "",opt_SchemaPath: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'generate', 'docs', '-f=0','-h=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Format: '0',
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'generate', 'docs', '-format=0','-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Format: '0',
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'generate', 'docs', '-format=0','-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Format: '0',
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'generate', 'docs', '-format=0','-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Format: '0',
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
    ];

    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput as Input_GenerateDocs;
            const want = tc.wantInput;
            
            assert.deepStrictEqual(got.opt_Format, want.opt_Format, `unexpected input for option: -format`);
            
            assert.deepStrictEqual(got.opt_Help, want.opt_Help, `unexpected input for option: -help`);
            
            assert.deepStrictEqual(got.opt_OutPath, want.opt_OutPath, `unexpected input for option: -out-path`);
            
            assert.deepStrictEqual(got.opt_SchemaPath, want.opt_SchemaPath, `unexpected input for option: -schema-path`);
            
            
        });
    });
});

test.describe('run_GenerateGolang', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'generate', 'golang', '-help=0','-out-path=0','-package=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_Package: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'generate', 'golang', 
                '--',
            ],
            wantInput: {opt_Help: false,opt_OutPath: "",opt_Package: "main",opt_SchemaPath: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'generate', 'golang', '-h=0','-out-path=0','-package=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_Package: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'generate', 'golang', '-help=0','-out-path=0','-package=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_Package: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'generate', 'golang', '-help=0','-out-path=0','-package=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_Package: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'generate', 'golang', '-help=0','-out-path=0','-package=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_Package: '0',
                opt_SchemaPath: '0',
            },
        },
    ];

    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput as Input_GenerateGolang;
            const want = tc.wantInput;
            
            assert.deepStrictEqual(got.opt_Help, want.opt_Help, `unexpected input for option: -help`);
            
            assert.deepStrictEqual(got.opt_OutPath, want.opt_OutPath, `unexpected input for option: -out-path`);
            
            assert.deepStrictEqual(got.opt_Package, want.opt_Package, `unexpected input for option: -package`);
            
            assert.deepStrictEqual(got.opt_SchemaPath, want.opt_SchemaPath, `unexpected input for option: -schema-path`);
            
            
        });
    });
});

test.describe('run_GenerateKotlin', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'generate', 'kotlin', '-help=0','-out-path=0','-package=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_Package: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'generate', 'kotlin', 
                '--',
            ],
            wantInput: {opt_Help: false,opt_OutPath: "",opt_Package: "",opt_SchemaPath: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'generate', 'kotlin', '-h=0','-out-path=0','-package=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_Package: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'generate', 'kotlin', '-help=0','-out-path=0','-package=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_Package: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'generate', 'kotlin', '-help=0','-out-path=0','-package=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_Package: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'generate', 'kotlin', '-help=0','-out-path=0','-package=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_Package: '0',
                opt_SchemaPath: '0',
            },
        },
    ];

    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput as Input_GenerateKotlin;
            const want = tc.wantInput;
            
            assert.deepStrictEqual(got.opt_Help, want.opt_Help, `unexpected input for option: -help`);
            
            assert.deepStrictEqual(got.opt_OutPath, want.opt_OutPath, `unexpected input for option: -out-path`);
            
            assert.deepStrictEqual(got.opt_Package, want.opt_Package, `unexpected input for option: -package`);
            
            assert.deepStrictEqual(got.opt_SchemaPath, want.opt_SchemaPath, `unexpected input for option: -schema-path`);
            
            
        });
    });
});

test.describe('run_GeneratePython3', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'generate', 'python3', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'generate', 'python3', 
                '--',
            ],
            wantInput: {opt_Help: false,opt_OutPath: "",opt_SchemaPath: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'generate', 'python3', '-h=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'generate', 'python3', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'generate', 'python3', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'generate', 'python3', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
    ];

    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput as Input_GeneratePython3;
            const want = tc.wantInput;
            
            assert.deepStrictEqual(got.opt_Help, want.opt_Help, `unexpected input for option: -help`);
            
            assert.deepStrictEqual(got.opt_OutPath, want.opt_OutPath, `unexpected input for option: -out-path`);
            
            assert.deepStrictEqual(got.opt_SchemaPath, want.opt_SchemaPath, `unexpected input for option: -schema-path`);
            
            
        });
    });
});

test.describe('run_GenerateTypescript', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'generate', 'typescript', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'generate', 'typescript', 
                '--',
            ],
            wantInput: {opt_Help: false,opt_OutPath: "",opt_SchemaPath: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'generate', 'typescript', '-h=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'generate', 'typescript', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'generate', 'typescript', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'generate', 'typescript', '-help=0','-out-path=0','-schema-path=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
                opt_OutPath: '0',
                opt_SchemaPath: '0',
            },
        },
    ];

    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput as Input_GenerateTypescript;
            const want = tc.wantInput;
            
            assert.deepStrictEqual(got.opt_Help, want.opt_Help, `unexpected input for option: -help`);
            
            assert.deepStrictEqual(got.opt_OutPath, want.opt_OutPath, `unexpected input for option: -out-path`);
            
            assert.deepStrictEqual(got.opt_SchemaPath, want.opt_SchemaPath, `unexpected input for option: -schema-path`);
            
            
        });
    });
});

test.describe('run_Version', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'version', '-help=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
            },
        },
        {
            name: 'default-options',
            args: [
                'version', 
                '--',
            ],
            wantInput: {opt_Help: false,
            },
        },
        {
            name: 'short-options',
            args: [
                'version', '-h=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
            },
        },
        {
            name: 'negated-options',
            args: [
                'version', '-help=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'version', '-help=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'version', '-help=0',
                '--',
            ],
            wantInput: {
                opt_Help: false,
            },
        },
    ];

    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput as Input_Version;
            const want = tc.wantInput;
            
            assert.deepStrictEqual(got.opt_Help, want.opt_Help, `unexpected input for option: -help`);
            
            
        });
    });
});


