// Code generated by cyamli, DO NOT EDIT.
import assert from 'node:assert';
import test from 'node:test';
import { run } from './cli_gen.js';
class CLIHandlerMock {
    gotInput;
    async run(input) {
        this.gotInput = input;
    }
    async run_Data(input) {
        this.gotInput = input;
    }
    async run_Schema(input) {
        this.gotInput = input;
    }
    async run_Tables(input) {
        this.gotInput = input;
    }
}
test.describe('run', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                '-config=0',
                '--',
            ],
            wantInput: {
                opt_Config: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                '--',
            ],
            wantInput: { opt_Config: "",
            },
        },
        {
            name: 'short-options',
            args: [
                '-config=0',
                '--',
            ],
            wantInput: {
                opt_Config: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                '-config=0',
                '--',
            ],
            wantInput: {
                opt_Config: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                '-config=0',
                '--',
            ],
            wantInput: {
                opt_Config: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                '-config=0',
                '--',
            ],
            wantInput: {
                opt_Config: '0',
            },
        },
    ];
    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput;
            const want = tc.wantInput;
            assert.deepStrictEqual(got.opt_Config, want.opt_Config, `unexpected input for option: -config`);
        });
    });
});
test.describe('run_Data', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'data', '-config=0', '-where=0',
                '--', '0',
            ],
            wantInput: {
                opt_Config: '0',
                opt_Where: '0',
                arg_Table: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'data',
                '--', '0',
            ],
            wantInput: { opt_Config: "", opt_Where: "",
                arg_Table: '0',
            },
        },
        {
            name: 'short-options',
            args: [
                'data', '-config=0', '-where=0',
                '--', '0',
            ],
            wantInput: {
                opt_Config: '0',
                opt_Where: '0',
                arg_Table: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'data', '-config=0', '-where=0',
                '--', '0',
            ],
            wantInput: {
                opt_Config: '0',
                opt_Where: '0',
                arg_Table: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'data', '-config=0', '-where=0',
                '--', '0',
            ],
            wantInput: {
                opt_Config: '0',
                opt_Where: '0',
                arg_Table: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'data', '-config=0', '-where=0',
                '--', '0',
            ],
            wantInput: {
                opt_Config: '0',
                opt_Where: '0',
                arg_Table: '0',
            },
        },
    ];
    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput;
            const want = tc.wantInput;
            assert.deepStrictEqual(got.opt_Config, want.opt_Config, `unexpected input for option: -config`);
            assert.deepStrictEqual(got.opt_Where, want.opt_Where, `unexpected input for option: -where`);
            assert.deepStrictEqual(got.arg_Table, want.arg_Table, `unexpected input for argument: table`);
        });
    });
});
test.describe('run_Schema', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'schema', '-config=0',
                '--', '0',
            ],
            wantInput: {
                opt_Config: '0',
                arg_Table: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'schema',
                '--', '0',
            ],
            wantInput: { opt_Config: "",
                arg_Table: '0',
            },
        },
        {
            name: 'short-options',
            args: [
                'schema', '-config=0',
                '--', '0',
            ],
            wantInput: {
                opt_Config: '0',
                arg_Table: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'schema', '-config=0',
                '--', '0',
            ],
            wantInput: {
                opt_Config: '0',
                arg_Table: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'schema', '-config=0',
                '--', '0',
            ],
            wantInput: {
                opt_Config: '0',
                arg_Table: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'schema', '-config=0',
                '--', '0',
            ],
            wantInput: {
                opt_Config: '0',
                arg_Table: '0',
            },
        },
    ];
    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput;
            const want = tc.wantInput;
            assert.deepStrictEqual(got.opt_Config, want.opt_Config, `unexpected input for option: -config`);
            assert.deepStrictEqual(got.arg_Table, want.arg_Table, `unexpected input for argument: table`);
        });
    });
});
test.describe('run_Tables', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'tables', '-config=0',
                '--',
            ],
            wantInput: {
                opt_Config: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'tables',
                '--',
            ],
            wantInput: { opt_Config: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'tables', '-config=0',
                '--',
            ],
            wantInput: {
                opt_Config: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'tables', '-config=0',
                '--',
            ],
            wantInput: {
                opt_Config: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'tables', '-config=0',
                '--',
            ],
            wantInput: {
                opt_Config: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'tables', '-config=0',
                '--',
            ],
            wantInput: {
                opt_Config: '0',
            },
        },
    ];
    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput;
            const want = tc.wantInput;
            assert.deepStrictEqual(got.opt_Config, want.opt_Config, `unexpected input for option: -config`);
        });
    });
});
