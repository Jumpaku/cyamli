// Code generated by cyamli, DO NOT EDIT.
import assert from 'node:assert';
import test from 'node:test';
import { run } from './cli_gen.js';
class CLIHandlerMock {
    gotInput;
    async run(input) {
        this.gotInput = input;
    }
    async run_Sub1(input) {
        this.gotInput = input;
    }
    async run_Sub1Sub2(input) {
        this.gotInput = input;
    }
    async run_Sub1Sub2Sub3(input) {
        this.gotInput = input;
    }
}
test.describe('run', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                '-negation-option=0', '-option=0', '-propagation-option=0', '-repeatable-option=0',
                '--', '0', '0', '0',
            ],
            wantInput: {
                opt_NegationOption: false,
                opt_Option: 0,
                opt_PropagationOption: '0',
                opt_RepeatableOption: '0',
                arg_FirstArg: false,
                arg_SecondArg: 0,
                arg_ThirdArg: ['0'],
            },
        },
        {
            name: 'default-options',
            args: [
                '--', '0', '0', '0',
            ],
            wantInput: { opt_NegationOption: false, opt_Option: 123, opt_PropagationOption: "", opt_RepeatableOption: "",
                arg_FirstArg: false,
                arg_SecondArg: 0,
                arg_ThirdArg: ['0'],
            },
        },
        {
            name: 'short-options',
            args: [
                '-negation-option=0', '-o=0', '-propagation-option=0', '-repeatable-option=0',
                '--', '0', '0', '0',
            ],
            wantInput: {
                opt_NegationOption: false,
                opt_Option: 0,
                opt_PropagationOption: '0',
                opt_RepeatableOption: '0',
                arg_FirstArg: false,
                arg_SecondArg: 0,
                arg_ThirdArg: ['0'],
            },
        },
        {
            name: 'negated-options',
            args: [
                '-no-negation-option=1', '-option=0', '-propagation-option=0', '-repeatable-option=0',
                '--', '0', '0', '0',
            ],
            wantInput: {
                opt_NegationOption: false,
                opt_Option: 0,
                opt_PropagationOption: '0',
                opt_RepeatableOption: '0',
                arg_FirstArg: false,
                arg_SecondArg: 0,
                arg_ThirdArg: ['0'],
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                '-no-negation-option=1', '-option=0', '-propagation-option=0', '-repeatable-option=0',
                '--', '0', '0',
            ],
            wantInput: {
                opt_NegationOption: false,
                opt_Option: 0,
                opt_PropagationOption: '0',
                opt_RepeatableOption: '0',
                arg_FirstArg: false,
                arg_SecondArg: 0,
                arg_ThirdArg: [],
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                '-no-negation-option=1', '-option=0', '-propagation-option=0', '-repeatable-option=0',
                '--', '0', '0', '0', '0',
            ],
            wantInput: {
                opt_NegationOption: false,
                opt_Option: 0,
                opt_PropagationOption: '0',
                opt_RepeatableOption: '0',
                arg_FirstArg: false,
                arg_SecondArg: 0,
                arg_ThirdArg: ['0', '0'],
            },
        },
    ];
    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput;
            const want = tc.wantInput;
            assert.deepStrictEqual(got.opt_NegationOption, want.opt_NegationOption, `unexpected input for option: -negation-option`);
            assert.deepStrictEqual(got.opt_Option, want.opt_Option, `unexpected input for option: -option`);
            assert.deepStrictEqual(got.opt_PropagationOption, want.opt_PropagationOption, `unexpected input for option: -propagation-option`);
            assert.deepStrictEqual(got.opt_RepeatableOption, want.opt_RepeatableOption, `unexpected input for option: -repeatable-option`);
            assert.deepStrictEqual(got.arg_FirstArg, want.arg_FirstArg, `unexpected input for argument: first_arg`);
            assert.deepStrictEqual(got.arg_SecondArg, want.arg_SecondArg, `unexpected input for argument: second_arg`);
            assert.deepStrictEqual(got.arg_ThirdArg, want.arg_ThirdArg, `unexpected input for argument: third_arg`);
        });
    });
});
test.describe('run_Sub1', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'sub1', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'sub1',
                '--',
            ],
            wantInput: { opt_PropagationOption: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'sub1', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'sub1', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'sub1', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'sub1', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
    ];
    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput;
            const want = tc.wantInput;
            assert.deepStrictEqual(got.opt_PropagationOption, want.opt_PropagationOption, `unexpected input for option: -propagation-option`);
        });
    });
});
test.describe('run_Sub1Sub2', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'sub1', 'sub2', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'sub1', 'sub2',
                '--',
            ],
            wantInput: { opt_PropagationOption: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'sub1', 'sub2', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'sub1', 'sub2', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'sub1', 'sub2', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'sub1', 'sub2', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
    ];
    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput;
            const want = tc.wantInput;
            assert.deepStrictEqual(got.opt_PropagationOption, want.opt_PropagationOption, `unexpected input for option: -propagation-option`);
        });
    });
});
test.describe('run_Sub1Sub2Sub3', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                'sub1', 'sub2', 'sub3', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'default-options',
            args: [
                'sub1', 'sub2', 'sub3',
                '--',
            ],
            wantInput: { opt_PropagationOption: "",
            },
        },
        {
            name: 'short-options',
            args: [
                'sub1', 'sub2', 'sub3', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'negated-options',
            args: [
                'sub1', 'sub2', 'sub3', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                'sub1', 'sub2', 'sub3', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                'sub1', 'sub2', 'sub3', '-propagation-option=0',
                '--',
            ],
            wantInput: {
                opt_PropagationOption: '0',
            },
        },
    ];
    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput;
            const want = tc.wantInput;
            assert.deepStrictEqual(got.opt_PropagationOption, want.opt_PropagationOption, `unexpected input for option: -propagation-option`);
        });
    });
});
