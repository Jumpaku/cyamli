// Code generated by {{.Generator}}, DO NOT EDIT.
using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;
using {{.Namespace}};

namespace {{.Namespace}}.Tests {

public class CLIHandlerMock : ICLIHandler {
    public object GotInput { get; set; }
    {{ range $Index, $Command := .CommandList -}}
    public void {{.HandlerMethodName}}(CLI.{{.HandlerInputType}} input) {
        GotInput = input;
    }
    {{end}}
}

{{ range $Index, $Command := .CommandList -}}
[TestFixture]
public class {{.HandlerMethodName}}Tests {
    public class TestCase {
        public string Name { get; set; }
        public string[] Args { get; set; }
        public CLI.{{.HandlerInputType}} WantInput { get; set; }
    }

    static IEnumerable<TestCase> TestCases() {
        return new List<TestCase> {
            new TestCase {
                Name = "command-line-arguments",
                Args = new[]{ "", {{range .Path}}"{{.}}", {{end}}{{range $Index, $Option := .Options}}"{{$Option.Option}}=0",{{end}}"--",{{range $Index, $Argument := .Arguments}}"0",{{end}} },
                WantInput = new CLI.{{.HandlerInputType}} {
                    {{- range $Index, $Option := .Options }}
                    {{.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}new List<long>{0}{{else}}0L{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}new List<bool>{false}{{else}}false{{end}}{{else}}{{if $Option.Repeated}}new List<string>{"0"}{{else}}"0"{{end}}{{end}},
                    {{- end }}
                    {{- range $Index, $Argument := .Arguments }}
                    {{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}new List<long>{0}{{else}}0L{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}new List<bool>{false}{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}new List<string>{"0"}{{else}}"0"{{end}}{{end}},
                    {{- end }}
                }
            },
            new TestCase {
                Name = "default-options",
                Args = new[]{ "", {{range .Path}}"{{.}}", {{end}}"--",{{range $Index, $Argument := .Arguments}}"0",{{end}} },
                WantInput = new CLI.{{.HandlerInputType}} {
                    {{- range $Index, $Option := .Options }}
                    {{.InputFieldName}} = {{.InputFieldInit}},
                    {{- end }}
                    {{- range $Index, $Argument := .Arguments }}
                    {{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}new List<long>{0}{{else}}0L{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}new List<bool>{false}{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}new List<string>{"0"}{{else}}"0"{{end}}{{end}},
                    {{- end }}
                }
            },
            new TestCase {
                Name = "short-options",
                Args = new[]{ "", {{range .Path}}"{{.}}", {{end}}{{range $Index, $Option := .Options}}"{{if $Option.ShortOption}}{{$Option.ShortOption}}{{else}}{{$Option.Option}}{{end}}=0",{{end}}"--",{{range $Index, $Argument := .Arguments}}"0",{{end}} },
                WantInput = new CLI.{{.HandlerInputType}} {
                    {{- range $Index, $Option := .Options }}
                    {{.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}new List<long>{0}{{else}}0L{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}new List<bool>{false}{{else}}false{{end}}{{else}}{{if $Option.Repeated}}new List<string>{"0"}{{else}}"0"{{end}}{{end}},
                    {{- end }}
                    {{- range $Index, $Argument := .Arguments }}
                    {{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}new List<long>{0}{{else}}0L{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}new List<bool>{false}{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}new List<string>{"0"}{{else}}"0"{{end}}{{end}},
                    {{- end }}
                }
            },
            new TestCase {
                Name = "negated-options",
                Args = new[]{ "", {{range .Path}}"{{.}}", {{end}}{{range $Index, $Option := .Options}}"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",{{end}}"--",{{range $Index, $Argument := .Arguments}}"0",{{end}} },
                WantInput = new CLI.{{.HandlerInputType}} {
                    {{- range $Index, $Option := .Options }}
                    {{.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}new List<long>{0}{{else}}0L{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}new List<bool>{false}{{else}}false{{end}}{{else}}{{if $Option.Repeated}}new List<string>{"0"}{{else}}"0"{{end}}{{end}},
                    {{- end }}
                    {{- range $Index, $Argument := .Arguments }}
                    {{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}new List<long>{0}{{else}}0L{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}new List<bool>{false}{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}new List<string>{"0"}{{else}}"0"{{end}}{{end}},
                    {{- end }}
                }
            },
            new TestCase {
                Name = "variadic-arguments-zero",
                Args = new[]{ "", {{range .Path}}"{{.}}", {{end}}{{range $Index, $Option := .Options}}"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",{{end}}"--",{{range $Index, $Argument := .Arguments}}{{if not $Argument.Variadic}}"0",{{end}}{{end}} },
                WantInput = new CLI.{{.HandlerInputType}} {
                    {{- range $Index, $Option := .Options }}
                    {{.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}new List<long>{0}{{else}}0L{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}new List<bool>{false}{{else}}false{{end}}{{else}}{{if $Option.Repeated}}new List<string>{"0"}{{else}}"0"{{end}}{{end}},
                    {{- end }}
                    {{- range $Index, $Argument := .Arguments }}
                    {{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}new List<long>(){{else}}0L{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}new List<bool>(){{else}}false{{end}}{{else}}{{if $Argument.Variadic}}new List<string>(){{else}}"0"{{end}}{{end}},
                    {{- end }}
                }
            },
            new TestCase {
                Name = "variadic-arguments-two",
                Args = new[]{ "", {{range .Path}}"{{.}}", {{end}}{{range $Index, $Option := .Options}}"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",{{end}}"--",{{range $Index, $Argument := .Arguments}}"0"{{if $Argument.Variadic}}, "0"{{end}},{{end}} },
                WantInput = new CLI.{{.HandlerInputType}} {
                    {{- range $Index, $Option := .Options }}
                    {{.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}new List<long>{0}{{else}}0L{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}new List<bool>{false}{{else}}false{{end}}{{else}}{{if $Option.Repeated}}new List<string>{"0"}{{else}}"0"{{end}}{{end}},
                    {{- end }}
                    {{- range $Index, $Argument := .Arguments }}
                    {{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}new List<long>{0, 0}{{else}}0L{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}new List<bool>{false, false}{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}new List<string>{"0", "0"}{{else}}"0"{{end}}{{end}},
                    {{- end }}
                }
            },
        };
    }

    [Test, TestCaseSource(nameof(TestCases))]
    public void RunTest(TestCase tc) {
        var mock = new CLIHandlerMock();
        CLI.Run(mock, tc.Args);
        var got = mock.GotInput as CLI.{{.HandlerInputType}};
        var want = tc.WantInput;
        {{range $Index, $Option := .Options }}
        Assert.That(got.{{.InputFieldName}}, Is.EqualTo(want.{{.InputFieldName}}), $"unexpected input for option: {{.Option}}");
        {{end}}
        {{range $Index, $Argument := .Arguments }}
        Assert.That(got.{{.InputFieldName}}, Is.EqualTo(want.{{.InputFieldName}}), $"unexpected input for argument: {{.Name}}");
        {{end}}
    }
}
{{end}}

} // namespace

