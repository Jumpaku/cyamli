// Code generated by {{.Generator}}, DO NOT EDIT.
// ignore_for_file: non_constant_identifier_names

/// Interface for CLI handlers
abstract class CLIHandler {
  {{- range $Index, $Command := .CommandList}}
  Future<void> {{$Command.HandlerMethodName}}({{$Command.HandlerInputType}} input);
  {{- end}}
}

/// Entry point for the CLI application
Future<void> run(CLIHandler handler, List<String> args) async {
  final (path, options, arguments) = resolveSubcommand(args);
  final subcommandPath = path;

  switch (subcommandPath.join(' ')) {
  {{- range .CommandList}}
  case {{.PathLiteral}}:
    final input = {{.HandlerInputType}}();
    input.resolveInput(subcommandPath, options, arguments);
    await handler.{{.HandlerMethodName}}(input);
    break;
  {{- end}}
  }
}

{{range $Index, $Command := .CommandList}}
/// Input class for {{$Command.HandlerMethodName}}
class {{$Command.HandlerInputType}} {
  {{- range $Index, $Option := $Command.Options -}}
  {{$Option.InputFieldType}} {{$Option.InputFieldName}} = {{$Option.InputFieldInit}};
  {{end -}}
  {{- range $Index, $Argument := $Command.Arguments -}}
  {{$Argument.InputFieldType}}? {{$Argument.InputFieldName}};
  {{end -}}

  List<String> subcommand = [];
  List<String> options = [];
  List<String> arguments = [];

  String? errorMessage;

  /// toString representation of the input
  @override
  String toString() {
      final buffer = StringBuffer();
      buffer.writeln('Subcommand: [${subcommand.join(' ')}]');
      buffer.writeln('Options: [${options.join(', ')}]');
      buffer.writeln('Arguments: [${arguments.join(', ')}]');
      {{- range $Index, $Option := $Command.Options -}}
      buffer.writeln('{{$Option.InputFieldName}}: ${{$Option.InputFieldName}}');
      {{end -}}
      {{- range $Index, $Argument := $Command.Arguments -}}
      buffer.writeln('{{$Argument.InputFieldName}}: ${{$Argument.InputFieldName}}');
      {{end -}}
      if (errorMessage != null) {
        buffer.writeln('Error: $errorMessage');
      }
      return buffer.toString();
    }
  void resolveInput(List<String> subcommand, List<String> options, List<String> arguments) {
    this.subcommand = subcommand;
    this.options = options;
    this.arguments = arguments;

    for (final arg in options) {
      final cut = arg.indexOf("=");
      String optName;
      String? lit;

      if (cut >= 0) {
        optName = arg.substring(0, cut);
        lit = arg.substring(cut + 1);
      }else{
        optName = arg;
      }

      {{- range $Index, $Option := $Command.Options}}
      if (['{{$Option.Option}}'{{if $Option.ShortOption}}, '{{$Option.ShortOption}}'{{end}}].contains(optName)) {
        if (cut < 0) {
          {{if or (eq $Option.InputFieldType "bool") (eq $Option.InputFieldType "List<bool>") -}}
          lit = 'true';
          {{- else -}}
          errorMessage = 'Value is not specified to option "$optName"';
          return;
          {{- end}}
        }
        dynamic v;
        try {
          v = parseValue(lit!, '{{$Option.InputFieldType}}');
        } catch (e) {
          errorMessage = 'Value "$lit" is not assignable to option "$optName"';
          return;
        }
        {{if $Option.Repeated -}}
        {{$Option.InputFieldName}}.addAll([v].map((e) => e as bool).toList());
        {{- else -}}
        {{$Option.InputFieldName}} = v;
        {{- end}}
        continue;
      }
      {{if $Option.Negation -}}
      if (optName == '-no{{$Option.Option}}') {
        if (cut < 0) {
          lit = 'true';
        }
        dynamic v;
        try {
          v = parseValue(lit!, '{{$Option.InputFieldType}}');
        } catch (e) {
          errorMessage = 'Value "$lit" is not assignable to option "$optName"';
          return;
        }
        {{if $Option.Repeated -}}
        {{$Option.InputFieldName}}.addAll([v].map((e) => !(e as bool)).toList());
        {{- else -}}
        {{$Option.InputFieldName}} = !(v as bool);
        {{- end}}
        continue;
      }
      {{- end}}
      {{end -}}
      errorMessage = 'Unknown option "$optName"';
      return;
    }

    final expectedArgs = {{len $Command.Arguments}};

    {{ range $Index, $Argument := .Arguments}}
    {{if $Argument.Variadic -}}
    if (arguments.length < {{$Index}}) {
      errorMessage = 'Too few arguments: required at least ${expectedArgs - 1}, got ${arguments.length}';
      return;
    }
    try {
      {{$Argument.InputFieldName}} = parseValues(arguments.sublist({{$Index}}), '{{$Argument.InputFieldType}}') as {{$Argument.InputFieldType}};
    } catch (e) {
      errorMessage = 'Values [${arguments.sublist({{$Index}}).join(" ")}] are not assignable to arguments at [{{$Index}}:]';
      return;
    }
    {{- else -}}
    if (arguments.length <= {{$Index}}) {
      errorMessage = 'Too few arguments: required $expectedArgs, got ${arguments.length}';
      return;
    }
    try {
      {{$Argument.InputFieldName}} = parseValue(arguments[{{$Index}}], '{{$Argument.InputFieldType}}');
    } catch (e) {
      errorMessage = 'Value "${arguments[{{$Index}}]}" is not assignable to argument at [{{$Index}}]';
      return;
    }
    {{- end}}
    {{end -}}
  }
}
{{end -}}

/// Resolves the subcommand from the arguments
(List<String> subcommandPath, List<String> options, List<String> arguments) resolveSubcommand(List<String> args) {
  final subcommandSet = {
  {{range .CommandList}}  {{.PathLiteral}}: true,{{end}}
  };

  final subcommandPath = <String>[];

  for (final arg in args) {
    if (arg == '--') {
      break;
    }
    final pathLiteral = [...subcommandPath, arg].join(' ');
    if (!subcommandSet.containsKey(pathLiteral)) {
      break;
    }
    subcommandPath.add(arg);
  }

  final restArgs = args.sublist(subcommandPath.length);
  final options = <String>[];
  final arguments = <String>[];
  for (int idx = 0; idx < restArgs.length; idx++) {
    final arg = restArgs[idx];
    if (arg == '--') {
      arguments.addAll(restArgs.sublist(idx + 1));
      break;
    }
    if (arg.startsWith('-')) {
      options.add(arg);
    } else {
      arguments.add(arg);
    }
  }

  return (subcommandPath, options, arguments);
}

/// Parses a string value to the specified type
dynamic parseValue(String strValue, String typeName) {
  switch (typeName) {
    case 'List<bool>':
      return parseValue(strValue, 'bool') as bool;
    case 'List<int>':
      return parseValue(strValue, 'int') as int;
    case 'List<String>':
      return parseValue(strValue, 'String') as String;
    case 'bool':
      if (['true', 't', '1'].contains(strValue.toLowerCase())) return true;
      if (['false', 'f', '0'].contains(strValue.toLowerCase())) return false;
      throw FormatException('Failed to parse "$strValue" as bool');
    case 'int':
      try {
        return int.parse(strValue);
      } catch (e) {
        throw FormatException('Failed to parse "$strValue" as int');
      }
    case 'String':
      return strValue;
    default:
      throw FormatException('Unsupported type: $typeName');
  }
}
/// Parses a string values to the specified type
List<dynamic> parseValues(List<String> strValue, String typeName) {
  switch (typeName) {
    case 'List<bool>':
      return strValue.map((s) => parseValue(s, 'bool') as bool).toList();
    case 'List<int>':
      return strValue.map((s) => parseValue(s, 'int') as int).toList();
    case 'List<String>':
      return strValue.map((s) => parseValue(s, 'String') as bool).toList();
    default:
      throw FormatException('Unsupported type: $typeName');
  }
}

/// Returns the version of the program.
String getVersion() {
  return '{{.Program.Version}}';
}
/// Returns the program name.
String getProgram() {
  return '{{.Program.Name}}';
}

/// Gets documentation for a subcommand
String getDoc(List<String> subcommands) {
  switch (subcommands.join(' ')) {
  {{- range .CommandList}}
    case {{.PathLiteral}}:
      return {{.DocText}};
  {{end -}}
    default:
      throw Exception('Invalid subcommands: $subcommands');
  }
}
