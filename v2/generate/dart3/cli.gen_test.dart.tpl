// Code generated by {{.Generator}}, DO NOT EDIT.
// ignore_for_file: non_constant_identifier_names

import 'package:test/test.dart';
import '{{.CliSourceFile}}';

class CLIHandlerMock implements CLIHandler {
  dynamic gotInput;

{{ range $Index, $Command := .CommandList -}}
  @override
  Future<void> {{$Command.HandlerMethodName}}({{$Command.HandlerInputType}} input) async {
    gotInput = input;
  }
{{end}}
}

void main() {
  {{ range $Index, $Command := .CommandList}}
  group('{{$Command.HandlerMethodName}}', () {
    final testcases = [
      {
        'name': 'command-line-arguments',
        'args': [
          {{range $Command.Path }}'{{.}}', {{end}}
        {{- range $Index, $Option := $Command.Options }}
          '{{$Option.Option}}=0',
        {{- end }}
          '--',
        {{- range $Index, $Argument := $Command.Arguments }}
          '0',
        {{- end }}
        ],
        'wantInput': {{$Command.HandlerInputType}}()
        {{- range $Index, $Option := $Command.Options }}
          ..{{$Option.InputFieldName}} = {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[0]{{else}}0{{end}}
          {{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[false]{{else}}false{{end}}
          {{- else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
        {{- range $Index, $Argument := $Command.Arguments }}
          ..{{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}
          {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[false]{{else}}false{{end}}
          {{- else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
      },
      {
        'name': 'default-options',
        'args': [
          {{range $Command.Path }}'{{.}}', {{end}}
          '--',
        {{- range $Index, $Argument := $Command.Arguments }}
          '0',
        {{- end }}
        ],
        'wantInput': {{$Command.HandlerInputType}}()
        {{- range $Index, $Option := $Command.Options }}
          ..{{$Option.InputFieldName}} = {{$Option.InputFieldInit}}
        {{- end }}
        {{- range $Index, $Argument := $Command.Arguments }}
          ..{{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}
          {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[false]{{else}}false{{end}}
          {{- else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
      },
      {
        'name': 'short-options',
        'args': [
          {{range $Command.Path }}'{{.}}', {{end}}
        {{- range $Index, $Option := $Command.Options }}
          '{{if $Option.ShortOption}}{{$Option.ShortOption}}{{else}}{{$Option.Option}}{{end}}=0',
        {{- end }}
          '--',
        {{- range $Index, $Argument := $Command.Arguments }}
          '0',
        {{- end }}
        ],
        'wantInput': {{$Command.HandlerInputType}}()
        {{- range $Index, $Option := $Command.Options }}
          ..{{$Option.InputFieldName}} = {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[0]{{else}}0{{end}}
          {{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[false]{{else}}false{{end}}
          {{- else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
        {{- range $Index, $Argument := $Command.Arguments }}
          ..{{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}
          {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[false]{{else}}false{{end}}
          {{- else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
      },
      {
        'name': 'negated-options',
        'args': [
          {{range $Command.Path }}'{{.}}', {{end}}
        {{- range $Index, $Option := $Command.Options }}
          '{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}',
        {{- end }}
          '--',
        {{- range $Index, $Argument := $Command.Arguments }}
          '0',
        {{- end }}
        ],
        'wantInput': {{$Command.HandlerInputType}}()
        {{- range $Index, $Option := $Command.Options }}
          ..{{$Option.InputFieldName}} = {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[0]{{else}}0{{end}}
          {{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[false]{{else}}false{{end}}
          {{- else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
        {{- range $Index, $Argument := $Command.Arguments }}
          ..{{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}
          {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[false]{{else}}false{{end}}
          {{- else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
      },
      {
        'name': 'variadic-arguments-zero',
        'args': [
          {{range $Command.Path }}'{{.}}', {{end}}
        {{- range $Index, $Option := $Command.Options }}
          '{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}',
        {{- end }}
          '--',
        {{- range $Index, $Argument := $Command.Arguments }}
          {{if not $Argument.Variadic}}'0',{{end}}
        {{- end }}
        ],
        'wantInput': {{$Command.HandlerInputType}}()
        {{- range $Index, $Option := $Command.Options }}
          ..{{$Option.InputFieldName}} = {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[0]{{else}}0{{end}}
          {{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[false]{{else}}false{{end}}
          {{- else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
        {{- range $Index, $Argument := $Command.Arguments }}
          ..{{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}<int>[]{{else}}0{{end}}
          {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}<bool>[]{{else}}false{{end}}
          {{- else}}{{if $Argument.Variadic}}<String>[]{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
      },
      {
        'name': 'variadic-arguments-two',
        'args': [
          {{range $Command.Path }}'{{.}}', {{end}}
        {{- range $Index, $Option := $Command.Options }}
          '{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}',
        {{- end }}
          '--',
        {{- range $Index, $Argument := $Command.Arguments }}
          '0'{{if $Argument.Variadic}}, '0'{{end}},
        {{- end }}
        ],
        'wantInput': {{$Command.HandlerInputType}}()
        {{- range $Index, $Option := $Command.Options }}
          ..{{$Option.InputFieldName}} = {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[0]{{else}}0{{end}}
          {{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[false]{{else}}false{{end}}
          {{- else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
        {{- range $Index, $Argument := $Command.Arguments }}
          ..{{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[0, 0]{{else}}0{{end}}
          {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[false, false]{{else}}false{{end}}
          {{- else}}{{if $Argument.Variadic}}['0', '0']{{else}}'0'{{end}}
          {{- end}}
        {{- end }}
      },
    ];

    for (final tc in testcases) {
      test(tc['name'] as String, () async {
        final mock = CLIHandlerMock();
        await run(mock, tc['args'] as List<String>);
        final got = mock.gotInput as {{$Command.HandlerInputType}};
        final want = tc['wantInput'] as {{$Command.HandlerInputType}};
        {{range $Index, $Option := $Command.Options }}
        expect(got.{{$Option.InputFieldName}}, equals(want.{{$Option.InputFieldName}}), reason: 'unexpected input for option: {{$Option.Option}}');
        {{- end}}
        {{range $Index, $Argument := $Command.Arguments }}
        expect(got.{{$Argument.InputFieldName}}, equals(want.{{$Argument.InputFieldName}}), reason: 'unexpected input for argument: {{$Argument.Name}}');
        {{- end}}
      });
    }
  });
  {{end}}
}
