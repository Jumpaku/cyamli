// Code generated by {{.Generator}}, DO NOT EDIT.
package {{.Package}}

import (
	"fmt"
	"strings"
	"strconv"
)

type CLIHandler interface {
	{{- range $Index, $Command := .CommandList -}}
	{{$Command.HandlerMethodName}}(input {{$Command.HandlerInputType}}) error
	{{end -}}
}

{{/* Entry point */}}
func Run(handler CLIHandler, args []string) error {
	subcommandPath, options, arguments := resolveArgs(args)
	switch strings.Join(subcommandPath, " ") {
	{{- range .CommandList}}
	case {{.PathLiteral}}:
		var input {{.HandlerInputType}}
		input.resolveInput(subcommandPath, options, arguments)
		return handler.{{.HandlerMethodName}}(input)
	{{end -}}
	}
	return nil
}

{{range $Index, $Command := .CommandList}}
type {{$Command.HandlerInputType}} struct {
	{{- range $Index, $Option := $Command.Options -}}
	{{$Option.InputFieldName}} {{$Option.InputFieldType}}
	{{end -}}
	{{- range $Index, $Argument := $Command.Arguments -}}
	{{$Argument.InputFieldName}} {{$Argument.InputFieldType}}
	{{end -}}

	Subcommand []string
	Options    []string
	Arguments  []string

	ErrorMessage string
}
func (input *{{$Command.HandlerInputType}}) resolveInput(subcommand, options, arguments []string) {
	*input = {{.HandlerInputType}}{
		{{- range $Index, $Option := $Command.Options -}}
		{{$Option.InputFieldName}}: {{$Option.InputFieldInit}},
		{{end -}}
		Subcommand: subcommand,
		Options:    options,
		Arguments:  arguments,
	}

	for _, arg := range input.Options {
		optName, lit, cut := strings.Cut(arg, "=")
		func(...any) {}(optName, lit, cut)

		switch optName {
		{{- range $Index, $Option := $Command.Options}}
		case "{{$Option.Option}}"{{if $Option.ShortOption}}, "{{$Option.ShortOption}}"{{end}}:
			if !cut {
				{{if or (eq $Option.InputFieldType "bool") (eq $Option.InputFieldType "[]bool") -}}
				lit = "true"
				{{- else -}}
				input.ErrorMessage = fmt.Sprintf("value is not specified to option %q", optName)
				return
				{{- end}}
			}
			if v, err := parseValue("{{$Option.InputFieldType}}", lit); err != nil {
				input.ErrorMessage = fmt.Sprintf("value %q is not assignable to option %q", lit, optName)
				return
			} else {
				{{if $Option.Repeated -}}
				input.{{$Option.InputFieldName}} = append(input.{{$Option.InputFieldName}}, v.({{$Option.InputFieldType}})[0])
				{{- else -}}
				input.{{$Option.InputFieldName}} = v.({{$Option.InputFieldType}})
				{{- end}}
			}
		{{if $Option.Negation}}case "-no{{$Option.Option}}":
			if !cut {
				lit = "true"
			}
			if v, err := parseValue("{{$Option.InputFieldType}}", lit); err != nil {
				input.ErrorMessage = fmt.Sprintf("value %q is not assignable to option %q", lit, optName)
				return
			} else {
				{{if $Option.Repeated -}}
				input.{{$Option.InputFieldName}} = append(input.{{$Option.InputFieldName}}, !v.({{$Option.InputFieldType}})[0])
				{{- else -}}
				input.{{$Option.InputFieldName}} = !v.({{$Option.InputFieldType}})
				{{- end}}
			}
		{{end}}
		{{end -}}
		default:
			input.ErrorMessage = fmt.Sprintf("unknown option %q", optName)
			return
		}
	}

	expectedArgs := {{len $Command.Arguments}}
	func(...any) {}(expectedArgs)

	{{- range $Index, $Argument := .Arguments}}
	{{if $Argument.Variadic -}}
	if len(input.Arguments) < {{$Index}} {
		input.ErrorMessage = fmt.Sprintf("too few arguments: required at least %d, got %d", expectedArgs-1, len(input.Arguments))
		return
	}

	if v, err := parseValue("{{$Argument.InputFieldType}}", input.Arguments[{{$Index}}:]...); err != nil {
		input.ErrorMessage = fmt.Sprintf("values [%s] are not assignable to arguments at [%d:]", strings.Join(input.Arguments[{{$Index}}:], " "), {{$Index}})
		return
	} else {
		input.{{$Argument.InputFieldName}} = v.({{$Argument.InputFieldType}})
	}
	{{- else -}}
	if len(input.Arguments) <= {{$Index}} {
		input.ErrorMessage = fmt.Sprintf("too few arguments: required %d, got %d", expectedArgs, len(input.Arguments))
		return
	}
	if v, err := parseValue("{{$Argument.InputFieldType}}", input.Arguments[{{$Index}}:]...); err != nil {
		input.ErrorMessage = fmt.Sprintf("value %q is not assignable to argument at [%d]", input.Arguments[{{$Index}}], {{$Index}})
		return
	} else {
		input.{{$Argument.InputFieldName}} = v.({{$Argument.InputFieldType}})
	}
	{{- end}}
	{{end -}}
}
{{end -}}

func resolveArgs(args []string) (subcommandPath []string, options []string, arguments []string) {
	if len(args) == 0 {
		panic("command line arguments are too few")
	}
	subcommandSet := map[string]bool{
	{{range .CommandList}}	{{.PathLiteral}}: true,{{end}}
	}

	for _, arg := range args[1:] {
		if arg == "--" {
			break
		}
		pathLiteral := strings.Join(append(append([]string{}, subcommandPath...), arg), " ")
		if !subcommandSet[pathLiteral] {
			break
		}
		subcommandPath = append(subcommandPath, arg)
	}

	restArgs := args[1+len(subcommandPath):]
	for idx, arg := range restArgs {
		if arg == "--" {
			arguments = append(arguments, restArgs[idx+1:]...)
			break
		}
		if strings.HasPrefix(arg, "-") {
			options = append(options, arg)
		} else {
			arguments = append(arguments, arg)
		}
	}

	return subcommandPath, options, arguments
}

func parseValue(typ string, strValue ...string) (dst any, err error) {
	switch typ {
	case "[]bool":
		val := make([]bool, len(strValue))
		for idx, str := range strValue {
			var v any
			if v, err = parseValue("bool", str); err != nil {
				return nil, fmt.Errorf("fail to parse %#v as []bool: %w", str, err)
			}
			val[idx] = v.(bool)
		}
		return val, nil
	case "[]int64":
		val := make([]int64, len(strValue))
		for idx, str := range strValue {
			var v any
			if v, err = parseValue("int64", str); err != nil {
				return nil, fmt.Errorf("fail to parse %#v as []int64: %w", str, err)
			}
			val[idx] = v.(int64)
		}
		return val, nil
	case "[]string":
		val := make([]string, len(strValue))
		for idx, str := range strValue {
			var v any
			if v, err = parseValue("string", str); err != nil {
				return nil, fmt.Errorf("fail to parse %#v as []string: %w", str, err)
			}
			val[idx] = v.(string)
		}
		return val, nil
	case "bool":
		switch strings.ToLower(strValue[0]) {
		default:
			return nil, fmt.Errorf("fail to parse %q as bool: unknown value", strValue[0])
		case "true", "1", "t":
			return true, nil
		case "false", "0", "f":
			return false, nil
		}
	case "int64":
		val, err := strconv.ParseInt(strValue[0], 0, 64)
		if err != nil {
			return nil, fmt.Errorf("fail to parse %q as int64: %w", strValue[0], err)
		}
		return val, nil
	case "string":
		return strValue[0], nil
	}

	return nil, fmt.Errorf("unknown type %q", typ)
}

func GetVersion() string {
	return "{{.Program.Version}}"
}
func GetProgram() string {
	return "{{.Program.Name}}"
}
func GetDoc(subcommands []string) string {
	switch strings.Join(subcommands, " ") {
{{- range .CommandList}}
	case {{.PathLiteral}}:
		return {{.DocText}}
{{end -}}
	default:
		panic(fmt.Sprintf(`invalid subcommands: %v`, subcommands))
	}
}
