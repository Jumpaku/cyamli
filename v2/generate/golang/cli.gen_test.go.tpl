// Code generated by {{.Generator}}, DO NOT EDIT.
package {{.Package}}_test

import (
	"github.com/stretchr/testify/assert"
	"testing"
	. "{{.Module}}/{{.Package}}"
)

type CLIHandlerMock struct {
	GotInput any
}

var _ CLIHandler = (*CLIHandlerMock)(nil)

{{ range $Index, $Command := .CommandList -}}
func (m *CLIHandlerMock) {{$Command.HandlerMethodName}}(input {{$Command.HandlerInputType}}) error {
	m.GotInput = input
	return nil
}
{{end}}


{{ range $Index, $Command := .CommandList -}}

func Test{{$Command.HandlerMethodName}}(t *testing.T) {
	testcases := []struct {
		name string
		args []string
		wantInput {{$Command.HandlerInputType}}
	}{
		{
			name: "command-line-arguments",
			args: []string{
				"", {{range $Command.Path }}"{{.}}", {{end}}
		{{- range $Index, $Option := $Command.Options }}
				"{{$Option.Option}}=0",
		{{- end }}
				"--",
		{{- range $Index, $Argument := $Command.Arguments }}
				"0",
		{{- end }}
			},
			wantInput: {{$Command.HandlerInputType}}{
		{{- range $Index, $Option := $Command.Options }}
				{{$Option.InputFieldName}}: {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[]int64{0}{{else}}0{{end}}
				{{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[]bool{false}{{else}}false{{end}}
				{{- else}}{{if $Option.Repeated}}[]string{"0"}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
		{{- range $Index, $Argument := $Command.Arguments }}
				{{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[]int64{0}{{else}}0{{end}}
				{{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[]bool{false}{{else}}false{{end}}
				{{- else}}{{if $Argument.Variadic}}[]string{"0"}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
			},
		},
		{
			name: "default-options",
			args: []string{
				"", {{range $Command.Path }}"{{.}}", {{end}}
				"--",
		{{- range $Index, $Argument := $Command.Arguments }}
				"0",
		{{- end }}
			},
			wantInput: {{$Command.HandlerInputType}}{
		{{- range $Index, $Option := $Command.Options }}
				{{$Option.InputFieldName}}: {{$Option.InputFieldInit}},
		{{- end }}
		{{- range $Index, $Argument := $Command.Arguments }}
				{{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[]int64{0}{{else}}0{{end}}
				{{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[]bool{false}{{else}}false{{end}}
				{{- else}}{{if $Argument.Variadic}}[]string{"0"}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
			},
		},
		{
			name: "short-options",
			args: []string{
				"", {{range $Command.Path }}"{{.}}", {{end}}
		{{- range $Index, $Option := $Command.Options }}
				"{{if $Option.ShortOption}}{{$Option.ShortOption}}{{else}}{{$Option.Option}}{{end}}=0",
		{{- end }}
				"--",
		{{- range $Index, $Argument := $Command.Arguments }}
				"0",
		{{- end }}
			},
			wantInput: {{$Command.HandlerInputType}}{
		{{- range $Index, $Option := $Command.Options }}
				{{$Option.InputFieldName}}: {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[]int64{0}{{else}}0{{end}}
				{{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[]bool{false}{{else}}false{{end}}
				{{- else}}{{if $Option.Repeated}}[]string{"0"}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
		{{- range $Index, $Argument := $Command.Arguments }}
				{{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[]int64{0}{{else}}0{{end}}
				{{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[]bool{false}{{else}}false{{end}}
				{{- else}}{{if $Argument.Variadic}}[]string{"0"}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
			},
		},
		{
			name: "negated-options",
			args: []string{
				"", {{range $Command.Path }}"{{.}}", {{end}}
		{{- range $Index, $Option := $Command.Options }}
				"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",
		{{- end }}
				"--",
		{{- range $Index, $Argument := $Command.Arguments }}
				"0",
		{{- end }}
			},
			wantInput: {{$Command.HandlerInputType}}{
		{{- range $Index, $Option := $Command.Options }}
				{{$Option.InputFieldName}}: {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[]int64{0}{{else}}0{{end}}
				{{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[]bool{false}{{else}}false{{end}}
				{{- else}}{{if $Option.Repeated}}[]string{"0"}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
		{{- range $Index, $Argument := $Command.Arguments }}
				{{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[]int64{0}{{else}}0{{end}}
				{{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[]bool{false}{{else}}false{{end}}
				{{- else}}{{if $Argument.Variadic}}[]string{"0"}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
			},
		},
		{
			name: "variadic-arguments-zero",
			args: []string{
				"", {{range $Command.Path }}"{{.}}", {{end}}
		{{- range $Index, $Option := $Command.Options }}
				"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",
		{{- end }}
				"--",
		{{- range $Index, $Argument := $Command.Arguments }}
				{{if not $Argument.Variadic}}"0",{{end}}
		{{- end }}
			},
			wantInput: {{$Command.HandlerInputType}}{
		{{- range $Index, $Option := $Command.Options }}
				{{$Option.InputFieldName}}: {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[]int64{0}{{else}}0{{end}}
				{{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[]bool{false}{{else}}false{{end}}
				{{- else}}{{if $Option.Repeated}}[]string{"0"}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
		{{- range $Index, $Argument := $Command.Arguments }}
				{{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[]int64{}{{else}}0{{end}}
				{{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[]bool{}{{else}}false{{end}}
				{{- else}}{{if $Argument.Variadic}}[]string{}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
			},
		},
		{
			name: "variadic-arguments-two",
			args: []string{
				"", {{range $Command.Path }}"{{.}}", {{end}}
		{{- range $Index, $Option := $Command.Options }}
				"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",
		{{- end }}
				"--",
		{{- range $Index, $Argument := $Command.Arguments }}
				"0"{{if $Argument.Variadic}}, "0"{{end}},
		{{- end }}
			},
			wantInput: {{$Command.HandlerInputType}}{
		{{- range $Index, $Option := $Command.Options }}
				{{$Option.InputFieldName}}: {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[]int64{0}{{else}}0{{end}}
				{{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[]bool{false}{{else}}false{{end}}
				{{- else}}{{if $Option.Repeated}}[]string{"0"}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
		{{- range $Index, $Argument := $Command.Arguments }}
				{{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[]int64{0, 0}{{else}}0{{end}}
				{{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[]bool{false, false}{{else}}false{{end}}
				{{- else}}{{if $Argument.Variadic}}[]string{"0", "0"}{{else}}"0"{{end}}
				{{- end}},
		{{- end }}
			},
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			mock := &CLIHandlerMock{}
			err := Run(mock, tc.args)
			if err != nil {
				t.Errorf("unexpected error: %v", err)
			}
			got := mock.GotInput.({{$Command.HandlerInputType}})
			want := tc.wantInput
		{{range $Index, $Option := $Command.Options }}
			assert.Equal(t, want.{{$Option.InputFieldName}}, got.{{$Option.InputFieldName}}, "unexpected input for option: %s", "{{$Option.Option}}")
		{{- end}}
		{{range $Index, $Argument := $Command.Arguments }}
			assert.Equal(t, want.{{$Argument.InputFieldName}}, got.{{$Argument.InputFieldName}}, "unexpected input for argument: %s", "{{$Argument.Name}}")
		{{- end}}
		})
	}
}

{{end -}}
