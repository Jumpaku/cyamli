// Code generated by {{.Generator}}, DO NOT EDIT.
package {{.Package}}

import {{.Package}}.*
import kotlin.test.*

class CLIHandlerMock : CLIHandler {
    var gotInput: Any? = null
    {{ range $Index, $Command := .CommandList -}}
    override fun {{$Command.HandlerMethodName}}(input: {{$Command.HandlerInputType}}): Unit {
        gotInput = input
    }
    {{end}}
}

{{ range $Index, $Command := .CommandList -}}
class Test_{{$Command.HandlerMethodName}} {
    @Test
    fun testTable() {
        data class TestCase(val name: String, val args: List<String>, val wantInput: {{$Command.HandlerInputType}})
        val testcases = listOf(
            TestCase(
                name = "command-line-arguments",
                args = listOf(
                    {{range $Command.Path}}"{{.}}", {{end}}
                    {{- range $Index, $Option := $Command.Options }}"{{$Option.Option}}=0",{{end}}
                    "--",
                    {{- range $Index, $Argument := $Command.Arguments }}"0",{{end}}
                ),
                wantInput = {{$Command.HandlerInputType}}(
                    {{- range $Index, $Option := $Command.Options }}
                    {{$Option.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}listOf(0){{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}listOf(false){{else}}false{{end}}{{else}}{{if $Option.Repeated}}listOf("0"){{else}}"0"{{end}}{{end}},
                    {{- end }}
                    {{- range $Index, $Argument := $Command.Arguments }}
                    {{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}listOf(0){{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}listOf(false){{else}}false{{end}}{{else}}{{if $Argument.Variadic}}listOf("0"){{else}}"0"{{end}}{{end}},
                    {{- end }}
                )
            ),
            TestCase(
                name = "default-options",
                args = listOf(
                    {{range $Command.Path}}"{{.}}", {{end}}
                    "--",
                    {{- range $Index, $Argument := $Command.Arguments }}"0",{{end}}
                ),
                wantInput = {{$Command.HandlerInputType}}(
                    {{- range $Index, $Option := $Command.Options }}
                    {{$Option.InputFieldName}} = {{$Option.InputFieldInit}},
                    {{- end }}
                    {{- range $Index, $Argument := $Command.Arguments }}
                    {{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}listOf(0){{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}listOf(false){{else}}false{{end}}{{else}}{{if $Argument.Variadic}}listOf("0"){{else}}"0"{{end}}{{end}},
                    {{- end }}
                )
            ),
            TestCase(
                name = "short-options",
                args = listOf(
                    {{range $Command.Path}}"{{.}}", {{end}}
                    {{- range $Index, $Option := $Command.Options }}"{{if $Option.ShortOption}}{{$Option.ShortOption}}{{else}}{{$Option.Option}}{{end}}=0",{{end}}
                    "--",
                    {{- range $Index, $Argument := $Command.Arguments }}"0",{{end}}
                ),
                wantInput = {{$Command.HandlerInputType}}(
                    {{- range $Index, $Option := $Command.Options }}
                    {{$Option.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}listOf(0){{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}listOf(false){{else}}false{{end}}{{else}}{{if $Option.Repeated}}listOf("0"){{else}}"0"{{end}}{{end}},
                    {{- end }}
                    {{- range $Index, $Argument := $Command.Arguments }}
                    {{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}listOf(0){{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}listOf(false){{else}}false{{end}}{{else}}{{if $Argument.Variadic}}listOf("0"){{else}}"0"{{end}}{{end}},
                    {{- end }}
                )
            ),
            TestCase(
                name = "negated-options",
                args = listOf(
                    {{range $Command.Path}}"{{.}}", {{end}}
                    {{- range $Index, $Option := $Command.Options }}"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",{{end}}
                    "--",
                    {{- range $Index, $Argument := $Command.Arguments }}"0",{{end}}
                ),
                wantInput = {{$Command.HandlerInputType}}(
                    {{- range $Index, $Option := $Command.Options }}
                    {{$Option.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}listOf(0){{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}listOf(false){{else}}false{{end}}{{else}}{{if $Option.Repeated}}listOf("0"){{else}}"0"{{end}}{{end}},
                    {{- end }}
                    {{- range $Index, $Argument := $Command.Arguments }}
                    {{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}listOf(0){{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}listOf(false){{else}}false{{end}}{{else}}{{if $Argument.Variadic}}listOf("0"){{else}}"0"{{end}}{{end}},
                    {{- end }}
                )
            ),
            TestCase(
                name = "variadic-arguments-zero",
                args = listOf(
                    {{range $Command.Path}}"{{.}}", {{end}}
                    {{- range $Index, $Option := $Command.Options }}"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",{{end}}
                    "--",
                    {{- range $Index, $Argument := $Command.Arguments }}{{if not $Argument.Variadic}}"0",{{end}}{{end}}
                ),
                wantInput = {{$Command.HandlerInputType}}(
                    {{- range $Index, $Option := $Command.Options }}
                    {{$Option.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}listOf(0){{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}listOf(false){{else}}false{{end}}{{else}}{{if $Option.Repeated}}listOf("0"){{else}}"0"{{end}}{{end}},
                    {{- end }}
                    {{- range $Index, $Argument := $Command.Arguments }}
                    {{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}listOf(){{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}listOf(){{else}}false{{end}}{{else}}{{if $Argument.Variadic}}listOf(){{else}}"0"{{end}}{{end}},
                    {{- end }}
                )
            ),
            TestCase(
                name = "variadic-arguments-two",
                args = listOf(
                    {{range $Command.Path}}"{{.}}", {{end}}
                    {{- range $Index, $Option := $Command.Options }}"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",{{end}}
                    "--",
                    {{- range $Index, $Argument := $Command.Arguments }}"0"{{if $Argument.Variadic}}, "0"{{end}},{{end}}
                ),
                wantInput = {{$Command.HandlerInputType}}(
                    {{- range $Index, $Option := $Command.Options }}
                    {{$Option.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}listOf(0){{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}listOf(false){{else}}false{{end}}{{else}}{{if $Option.Repeated}}listOf("0"){{else}}"0"{{end}}{{end}},
                    {{- end }}
                    {{- range $Index, $Argument := $Command.Arguments }}
                    {{$Argument.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}listOf(0, 0){{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}listOf(false, false){{else}}false{{end}}{{else}}{{if $Argument.Variadic}}listOf("0", "0"){{else}}"0"{{end}}{{end}},
                    {{- end }}
                )
            ),
        )
        for (tc in testcases) {
            println("Running test case: ${tc.name}")
            val mock = CLIHandlerMock()
            execute(mock, tc.args.toTypedArray())
            val got = mock.gotInput as {{$Command.HandlerInputType}}
            val want = tc.wantInput
            {{range $Index, $Option := $Command.Options }}
            assertEquals(want.{{$Option.InputFieldName}}, got.{{$Option.InputFieldName}}, "unexpected input for option: {{$Option.Option}}")
            {{- end}}
            {{range $Index, $Argument := $Command.Arguments }}
            assertEquals(want.{{$Argument.InputFieldName}}, got.{{$Argument.InputFieldName}}, "unexpected input for argument: {{$Argument.Name}}")
            {{- end}}
        }
    }
}
{{end -}}

