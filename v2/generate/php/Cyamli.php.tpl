<?php
// Code generated by {{.Generator}}, DO NOT EDIT.

namespace {{.Namespace}};

class Cyamli {

    /**
     * Entry point
     * @param CLIHandler $handler
     * @param string[] $args
     */
    public static function Run(CLIHandler $handler, array $args): void {
        [$subcommandPath, $options, $arguments] = self::resolveArgs($args);
        switch (implode(' ', $subcommandPath)) {
        {{- range .CommandList }}
            case {{.PathLiteral}}:
                $input = new {{.HandlerInputType}}();
                $input->resolveInput($subcommandPath, $options, $arguments);
                $handler->{{.HandlerMethodName}}($input);
                break;
        {{- end }}
        }
    }

    public static function GetVersion(): string {
        return {{printf "%q" .Program.Version}};
    }
    public static function GetProgram(): string {
        return {{printf "%q" .Program.Name}};
    }
    public static function GetDoc(array $subcommands): string {
        switch (implode(' ', $subcommands)) {
        {{- range .CommandList}}
            case {{.PathLiteral}}:
                return {{.DocText}};
        {{end}}
            default:
                throw new \RuntimeException('invalid subcommands: ' . implode(', ', $subcommands));
        }
    }

    /**
     * @param string[] $args
     * @return array{0: string[], 1: string[], 2: string[]}
     */
    private static function resolveArgs(array $args): array {
        if (count($args) === 0) {
            throw new \RuntimeException('command line arguments are too few');
        }
        $subcommandSet = [
            {{range .CommandList}}{{.PathLiteral}} => true,{{end}}
        ];
        $subcommandPath = [];
        $options = [];
        $arguments = [];
        for ($i = 1; $i < count($args); ++$i) {
            if ($args[$i] === '--') break;
            $pathLiteral = implode(' ', array_merge($subcommandPath, [$args[$i]]));
            if (!isset($subcommandSet[$pathLiteral])) break;
            $subcommandPath[] = $args[$i];
        }
        $restArgs = array_slice($args, 1 + count($subcommandPath));
        foreach ($restArgs as $idx => $arg) {
            if ($arg === '--') {
                $arguments = array_merge($arguments, array_slice($restArgs, $idx + 1));
                break;
            }
            if (strpos($arg, '-') === 0) {
                $options[] = $arg;
            } else {
                $arguments[] = $arg;
            }
        }
        return [$subcommandPath, $options, $arguments];
    }

}