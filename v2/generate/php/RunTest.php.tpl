<?php
// Code generated by {{.Generator}}, DO NOT EDIT.

namespace {{.TestNamespace}};

use PHPUnit\Framework\TestCase;
use \{{.Namespace}}\Cyamli;
use \{{.Namespace}}\{{.HandlerInputType}};

class {{.HandlerMethodName}}_Test extends TestCase {
    /**
     * @dataProvider provideTestCases
     */
    public function testRun($name, $args, $wantInput) {
        $mock = new CLIHandlerMock();
        Cyamli::Run($mock, $args);
        $got = $mock->gotInput;
        $want = $wantInput;
        {{range $Index, $Option := .Options}}
        $this->assertEquals($want->{{.InputFieldName}}, $got->{{.InputFieldName}}, $name . ": unexpected input for option: {{.Option}}");
        {{end}}
        {{range $Index, $Argument := .Arguments}}
        $this->assertEquals($want->{{.InputFieldName}}, $got->{{.InputFieldName}}, $name . ": unexpected input for argument: {{.Name}}");
        {{end}}
    }

    public function provideTestCases() {
        return [
            // command-line-arguments
            [
                'command-line-arguments',
                ["", {{range .Path}}"{{.}}", {{end}}{{range $Index, $Option := .Options}}"{{$Option.Option}}=0",{{end}}"--",{{range $Index, $Argument := .Arguments}}"0",{{end}}],
                (function() {
                    $input = new {{.HandlerInputType}}();
                    {{range $Index, $Option := .Options}}
                    $input->{{.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}[0]{{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}[false]{{else}}false{{end}}{{else}}{{if $Option.Repeated}}["0"]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    {{range $Index, $Argument := .Arguments}}
                    $input->{{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[false]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}["0"]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    return $input;
                })(),
            ],
            // default-options
            [
                'default-options',
                ["", {{range .Path}}"{{.}}", {{end}}"--",{{range $Index, $Argument := .Arguments}}"0",{{end}}],
                (function() {
                    $input = new {{.HandlerInputType}}();
                    {{range $Index, $Option := .Options}}
                    $input->{{.InputFieldName}} = {{.InputFieldInit}};
                    {{end}}
                    {{range $Index, $Argument := .Arguments}}
                    $input->{{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[false]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}["0"]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    return $input;
                })(),
            ],
            // short-options
            [
                'short-options',
                ["", {{range .Path}}"{{.}}", {{end}}{{range $Index, $Option := .Options}}"{{if $Option.ShortOption}}{{$Option.ShortOption}}{{else}}{{$Option.Option}}{{end}}=0",{{end}}"--",{{range $Index, $Argument := .Arguments}}"0",{{end}}],
                (function() {
                    $input = new {{.HandlerInputType}}();
                    {{range $Index, $Option := .Options}}
                    $input->{{.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}[0]{{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}[false]{{else}}false{{end}}{{else}}{{if $Option.Repeated}}["0"]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    {{range $Index, $Argument := .Arguments}}
                    $input->{{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[false]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}["0"]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    return $input;
                })(),
            ],
            // negated-options
            [
                'negated-options',
                ["", {{range .Path}}"{{.}}", {{end}}{{range $Index, $Option := .Options}}"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",{{end}}"--",{{range $Index, $Argument := .Arguments}}"0",{{end}}],
                (function() {
                    $input = new {{.HandlerInputType}}();
                    {{range $Index, $Option := .Options}}
                    $input->{{.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}[0]{{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}[false]{{else}}false{{end}}{{else}}{{if $Option.Repeated}}["0"]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    {{range $Index, $Argument := .Arguments}}
                    $input->{{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[false]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}["0"]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    return $input;
                })(),
            ],
            // variadic-arguments-zero
            [
                'variadic-arguments-zero',
                ["", {{range .Path}}"{{.}}", {{end}}{{range $Index, $Option := .Options}}"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",{{end}}"--",{{range $Index, $Argument := .Arguments}}{{if not $Argument.Variadic}}"0",{{end}}{{end}}],
                (function() {
                    $input = new {{.HandlerInputType}}();
                    {{range $Index, $Option := .Options}}
                    $input->{{.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}[0]{{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}[false]{{else}}false{{end}}{{else}}{{if $Option.Repeated}}["0"]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    {{range $Index, $Argument := .Arguments}}
                    $input->{{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}[]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    return $input;
                })(),
            ],
            // variadic-arguments-two
            [
                'variadic-arguments-two',
                ["", {{range .Path}}"{{.}}", {{end}}{{range $Index, $Option := .Options}}"{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}",{{end}}"--",{{range $Index, $Argument := .Arguments}}"0"{{if $Argument.Variadic}}, "0"{{end}},{{end}}],
                (function() {
                    $input = new {{.HandlerInputType}}();
                    {{range $Index, $Option := .Options}}
                    $input->{{.InputFieldName}} = {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}[0]{{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}[false]{{else}}false{{end}}{{else}}{{if $Option.Repeated}}["0"]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    {{range $Index, $Argument := .Arguments}}
                    $input->{{.InputFieldName}} = {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[0, 0]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[false, false]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}["0", "0"]{{else}}"0"{{end}}{{end}};
                    {{end}}
                    return $input;
                })(),
            ],
        ];
    }
}

