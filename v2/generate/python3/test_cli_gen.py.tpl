# Code generated by {{.Generator}}, DO NOT EDIT.
import unittest
from {{.Module}} import CLIHandler, run{{ range $Index, $Command := .CommandList -}}, {{$Command.HandlerInputType}}{{end}}

class CLIHandlerMock(CLIHandler):
    def __init__(self):
        self.got_input = None

{{ range $Index, $Command := .CommandList }}
    def {{$Command.HandlerMethodName}}(self, input):
        self.got_input = input
        return None
{{end}}


def initAttrs(obj, attrs) -> object:
    for attr, value in attrs.items():
        setattr(obj, attr, value)
    return obj

{{ range $Index, $Command := .CommandList -}}
class Test{{$Command.HandlerMethodName}}(unittest.TestCase):
    def test_table(self):
        testcases = [
            {
                'name': 'command-line-arguments',
                'args': [
                    '', {{range $Command.Path }}'{{.}}', {{end}}
                {{- range $Index, $Option := $Command.Options }}
                    '{{$Option.Option}}=0',
                {{- end }}
                    '--',
                {{- range $Index, $Argument := $Command.Arguments }}
                    '0',
                {{- end }}
                ],
                'want_input': initAttrs({{$Command.HandlerInputType}}(), {
                {{- range $Index, $Option := $Command.Options }}
                    "{{$Option.InputFieldName}}": {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[0]{{else}}0{{end}}
                    {{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[False]{{else}}False{{end}}
                    {{- else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                {{- range $Index, $Argument := $Command.Arguments }}
                    "{{$Argument.InputFieldName}}": {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}
                    {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[False]{{else}}False{{end}}
                    {{- else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                }),
            },
            {
                'name': 'default-options',
                'args': [
                    '', {{range $Command.Path }}'{{.}}', {{end}}
                    '--',
                {{- range $Index, $Argument := $Command.Arguments }}
                    '0',
                {{- end }}
                ],
                'want_input': initAttrs({{$Command.HandlerInputType}}(), {
                {{- range $Index, $Option := $Command.Options }}
                    "{{$Option.InputFieldName}}": {{$Option.InputFieldInit}},
                {{- end }}
                {{- range $Index, $Argument := $Command.Arguments }}
                    "{{$Argument.InputFieldName}}": {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}
                    {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[False]{{else}}False{{end}}
                    {{- else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                }),
            },
            {
                'name': 'short-options',
                'args': [
                    '', {{range $Command.Path }}'{{.}}', {{end}}
                {{- range $Index, $Option := $Command.Options }}
                    '{{if $Option.ShortOption}}{{$Option.ShortOption}}{{else}}{{$Option.Option}}{{end}}=0',
                {{- end }}
                    '--',
                {{- range $Index, $Argument := $Command.Arguments }}
                    '0',
                {{- end }}
                ],
                'want_input': initAttrs({{$Command.HandlerInputType}}(), {
                {{- range $Index, $Option := $Command.Options }}
                    "{{$Option.InputFieldName}}": {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[0]{{else}}0{{end}}
                    {{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[False]{{else}}False{{end}}
                    {{- else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                {{- range $Index, $Argument := $Command.Arguments }}
                    "{{$Argument.InputFieldName}}": {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}
                    {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[False]{{else}}False{{end}}
                    {{- else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                }),
            },
            {
                'name': 'negated-options',
                'args': [
                    '', {{range $Command.Path }}'{{.}}', {{end}}
                {{- range $Index, $Option := $Command.Options }}
                    '{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}',
                {{- end }}
                    '--',
                {{- range $Index, $Argument := $Command.Arguments }}
                    '0',
                {{- end }}
                ],
                'want_input': initAttrs({{$Command.HandlerInputType}}(), {
                {{- range $Index, $Option := $Command.Options }}
                    "{{$Option.InputFieldName}}": {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[0]{{else}}0{{end}}
                    {{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[False]{{else}}False{{end}}
                    {{- else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                {{- range $Index, $Argument := $Command.Arguments }}
                    "{{$Argument.InputFieldName}}": {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}
                    {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[False]{{else}}False{{end}}
                    {{- else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                }),
            },
            {
                'name': 'variadic-arguments-zero',
                'args': [
                    '', {{range $Command.Path }}'{{.}}', {{end}}
                {{- range $Index, $Option := $Command.Options }}
                    '{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}',
                {{- end }}
                    '--',
                {{- range $Index, $Argument := $Command.Arguments }}
                    {{if not $Argument.Variadic}}'0',{{end}}
                {{- end }}
                ],
                'want_input': initAttrs({{$Command.HandlerInputType}}(), {
                {{- range $Index, $Option := $Command.Options }}
                    "{{$Option.InputFieldName}}": {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[0]{{else}}0{{end}}
                    {{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[False]{{else}}False{{end}}
                    {{- else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                {{- range $Index, $Argument := $Command.Arguments }}
                    "{{$Argument.InputFieldName}}": {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[]{{else}}0{{end}}
                    {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[]{{else}}False{{end}}
                    {{- else}}{{if $Argument.Variadic}}[]{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                }),
            },
            {
                'name': 'variadic-arguments-two',
                'args': [
                    '', {{range $Command.Path }}'{{.}}', {{end}}
                {{- range $Index, $Option := $Command.Options }}
                    '{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}',
                {{- end }}
                    '--',
                {{- range $Index, $Argument := $Command.Arguments }}
                    '0'{{if $Argument.Variadic}}, '0'{{end}},
                {{- end }}
                ],
                'want_input': initAttrs({{$Command.HandlerInputType}}(), {
                {{- range $Index, $Option := $Command.Options }}
                    "{{$Option.InputFieldName}}": {{if eq $Option.Type "integer" -}}{{if $Option.Repeated}}[0]{{else}}0{{end}}
                    {{- else if eq $Option.Type "boolean"}}{{if $Option.Repeated -}}[False]{{else}}False{{end}}
                    {{- else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                {{- range $Index, $Argument := $Command.Arguments }}
                    "{{$Argument.InputFieldName}}": {{if eq $Argument.Type "integer" -}}{{if $Argument.Variadic}}[0, 0]{{else}}0{{end}}
                    {{- else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic -}}[False, False]{{else}}False{{end}}
                    {{- else}}{{if $Argument.Variadic}}['0', '0']{{else}}'0'{{end}}
                    {{- end}},
                {{- end }}
                }),
            },
        ]
        for tc in testcases:
            with self.subTest(tc['name']):
                mock = CLIHandlerMock()
                err = run(mock, tc['args'])
                if err is not None:
                    self.fail(f"unexpected error: {err}")
                got = mock.got_input
                want = tc['want_input']
                {{range $Index, $Option := $Command.Options }}
                self.assertEqual(want.{{$Option.InputFieldName}}, got.{{$Option.InputFieldName}}, f"unexpected input for option: {{$Option.Option}}")
                {{- end}}
                {{range $Index, $Argument := $Command.Arguments }}
                self.assertEqual(want.{{$Argument.InputFieldName}}, got.{{$Argument.InputFieldName}}, f"unexpected input for argument: {{$Argument.Name}}")
                {{- end}}

{{end -}}

if __name__ == '__main__':
    unittest.main()
