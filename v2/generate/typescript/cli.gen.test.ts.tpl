// Code generated by {{.Generator}}, DO NOT EDIT.
import assert from 'node:assert';
import test from 'node:test';
import { run, CLIHandler{{range .CommandList}}, {{.HandlerInputType}}{{end}} } from '{{.ModuleFile}}';

class CLIHandlerMock implements CLIHandler {
    public gotInput: any;
    {{range $Index, $Command := .CommandList}}
    async {{$Command.HandlerMethodName}}(input: {{$Command.HandlerInputType}}): Promise<void> {
        this.gotInput = input;
    }
    {{end}}
}

{{range $Index, $Command := .CommandList}}
test.describe('{{.HandlerMethodName}}', () => {
    const testcases = [
        {
            name: 'command-line-arguments',
            args: [
                {{range .Path}}'{{.}}', {{end}}
                {{- range $Index, $Option := .Options }}'{{$Option.Option}}=0',{{end}}
                '--',
                {{- range $Index, $Argument := .Arguments }}'0',{{end}}
            ],
            wantInput: {
                {{- range $Index, $Option := .Options }}
                {{$Option.InputFieldName}}: {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}[0]{{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}[false]{{else}}false{{end}}{{else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}{{end}},
                {{- end }}
                {{- range $Index, $Argument := .Arguments }}
                {{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[false]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}{{end}},
                {{- end }}
            },
        },
        {
            name: 'default-options',
            args: [
                {{range .Path}}'{{.}}', {{end}}
                '--',
                {{- range $Index, $Argument := .Arguments }}'0',{{end}}
            ],
            wantInput: {
                {{- range $Index, $Option := .Options }}{{$Option.InputFieldName}}: {{$Option.InputFieldInit}},{{end}}
                {{- range $Index, $Argument := .Arguments }}
                {{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[false]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}{{end}},
                {{- end }}
            },
        },
        {
            name: 'short-options',
            args: [
                {{range .Path}}'{{.}}', {{end}}
                {{- range $Index, $Option := .Options }}'{{if $Option.ShortOption}}{{$Option.ShortOption}}{{else}}{{$Option.Option}}{{end}}=0',{{end}}
                '--',
                {{- range $Index, $Argument := .Arguments }}'0',{{end}}
            ],
            wantInput: {
                {{- range $Index, $Option := .Options }}
                {{$Option.InputFieldName}}: {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}[0]{{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}[false]{{else}}false{{end}}{{else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}{{end}},
                {{- end }}
                {{- range $Index, $Argument := .Arguments }}
                {{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[false]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}{{end}},
                {{- end }}
            },
        },
        {
            name: 'negated-options',
            args: [
                {{range .Path}}'{{.}}', {{end}}
                {{- range $Index, $Option := .Options }}'{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}',{{end}}
                '--',
                {{- range $Index, $Argument := .Arguments }}'0',{{end}}
            ],
            wantInput: {
                {{- range $Index, $Option := .Options }}
                {{$Option.InputFieldName}}: {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}[0]{{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}[false]{{else}}false{{end}}{{else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}{{end}},
                {{- end }}
                {{- range $Index, $Argument := .Arguments }}
                {{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[0]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[false]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}['0']{{else}}'0'{{end}}{{end}},
                {{- end }}
            },
        },
        {
            name: 'variadic-arguments-zero',
            args: [
                {{range .Path}}'{{.}}', {{end}}
                {{- range $Index, $Option := .Options }}'{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}',{{end}}
                '--',
                {{- range $Index, $Argument := .Arguments }}{{if not $Argument.Variadic}}'0',{{end}}{{end}}
            ],
            wantInput: {
                {{- range $Index, $Option := .Options }}
                {{$Option.InputFieldName}}: {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}[0]{{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}[false]{{else}}false{{end}}{{else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}{{end}},
                {{- end }}
                {{- range $Index, $Argument := .Arguments }}
                {{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}[]{{else}}'0'{{end}}{{end}},
                {{- end }}
            },
        },
        {
            name: 'variadic-arguments-two',
            args: [
                {{range .Path}}'{{.}}', {{end}}
                {{- range $Index, $Option := .Options }}'{{if $Option.Negation}}-no{{$Option.Option}}=1{{else}}{{$Option.Option}}=0{{end}}',{{end}}
                '--',
                {{- range $Index, $Argument := .Arguments }}'0'{{if $Argument.Variadic}}, '0'{{end}},{{end}}
            ],
            wantInput: {
                {{- range $Index, $Option := .Options }}
                {{$Option.InputFieldName}}: {{if eq $Option.Type "integer"}}{{if $Option.Repeated}}[0]{{else}}0{{end}}{{else if eq $Option.Type "boolean"}}{{if $Option.Repeated}}[false]{{else}}false{{end}}{{else}}{{if $Option.Repeated}}['0']{{else}}'0'{{end}}{{end}},
                {{- end }}
                {{- range $Index, $Argument := .Arguments }}
                {{$Argument.InputFieldName}}: {{if eq $Argument.Type "integer"}}{{if $Argument.Variadic}}[0, 0]{{else}}0{{end}}{{else if eq $Argument.Type "boolean"}}{{if $Argument.Variadic}}[false, false]{{else}}false{{end}}{{else}}{{if $Argument.Variadic}}['0', '0']{{else}}'0'{{end}}{{end}},
                {{- end }}
            },
        },
    ];

    testcases.forEach(tc => {
        test(tc.name, async () => {
            const mock = new CLIHandlerMock();
            await run(mock, tc.args);
            const got = mock.gotInput as {{.HandlerInputType}};
            const want = tc.wantInput;
            {{range $Index, $Option := .Options }}
            assert.deepStrictEqual(got.{{$Option.InputFieldName}}, want.{{$Option.InputFieldName}}, `unexpected input for option: {{$Option.Option}}`);
            {{end}}
            {{range $Index, $Argument := .Arguments }}
            assert.deepStrictEqual(got.{{$Argument.InputFieldName}}, want.{{$Argument.InputFieldName}}, `unexpected input for argument: {{$Argument.Name}}`);
            {{end}}
        });
    });
});
{{end}}

