// Code generated by {{.Generator}}, DO NOT EDIT.

/**
 * @typedef {({
{{- range $Index, $Command := .CommandList}}
 * {{$Command.HandlerMethodName}}: function({{$Command.HandlerInputType}}): Promise<void>,
{{- end}}
 * })} CLIHandler
 */
/**
 * Type declaration for CLIHandler
 * @type {(CLIHandler)}
 */
export interface CLIHandler {
{{range $Index, $Command := .CommandList}}
  /**
   * Handles the {{$Command.HandlerMethodName}} command.
   * @param { ({{$Command.HandlerInputType}}) } input - The input parameters for the command.
   * @returns {(Promise<void>)} A promise that resolves when the command is executed.
   */
  {{$Command.HandlerMethodName}}(input: {{$Command.HandlerInputType}}): Promise<void>;
{{end}}
}

/**
 * Entry point for the CLI application.
 * @param {(CLIHandler)} handler - The CLIHandler instance to handle commands.
 * @param {(string[])} args - The command-line arguments.
 * @returns {(Promise<void>)} A promise that resolves when the application finishes execution.
 */
export async function run(handler: CLIHandler, args: string[]): Promise<void> {
  const [subcommandPath, options, positionalArguments] = resolveSubcommand(args);

  switch (subcommandPath.join(' ')) {
{{range .CommandList}}
  case {{.PathLiteral}}:
    {
      const input = new {{.HandlerInputType}}();
      input.resolveInput(subcommandPath, options, positionalArguments);
      return handler.{{.HandlerMethodName}}(input);
    }
{{end}}
  default:
    throw new Error();
  }
}

{{range $Index, $Command := .CommandList}}
/**
 * Input class for {{$Command.HandlerMethodName}}.
 * @type { ({{$Command.HandlerInputType}}) }
 */
export class {{$Command.HandlerInputType}} {
{{range $Index, $Option := $Command.Options}}
  /**
   * {{$Option.Option}} option.
   * @type { ({{$Option.InputFieldType}}) }
   */
  public {{$Option.InputFieldName}}: {{$Option.InputFieldType}} = {{$Option.InputFieldInit}};
{{end}}
{{range $Index, $Argument := $Command.Arguments}}
  /**
   * Argument of type {{$Argument.InputFieldType}}.
   * @type { ({{$Argument.InputFieldType}}) }
   */
  public {{$Argument.InputFieldName}}: {{$Argument.InputFieldType}} = {{if eq $Argument.InputFieldType "string"}}""{{else if eq $Argument.InputFieldType "boolean"}}false{{else if eq $Argument.InputFieldType "number"}}0{{else if eq $Argument.InputFieldType "string[]"}}[]{{else if eq $Argument.InputFieldType "boolean[]"}}[]{{else if eq $Argument.InputFieldType "number[]"}}[]{{else}}undefined as any{{end}};
{{end}}

  /**
   * Subcommand path.
   * @type {(string[])}
   */
  public subcommand: string[] = [];

  /**
   * Options provided in the command.
   * @type {(string[])}
   */
  public options: string[] = [];

  /**
   * Positional arguments provided in the command.
   * @type {(string[])}
   */
  public arguments: string[] = [];

  /**
   * Error message if input resolution fails.
   * @type {(string | null)}
   */
  public errorMessage: string | null = null;

  /**
   * Converts the input to a string representation.
   * @returns {(string)} A string representation of the input.
   */
  public toString(): string {
    const lines: string[] = [];
    lines.push(`Subcommand: [${this.subcommand.join(' ')}]`);
    lines.push(`Options: [${this.options.join(', ')}]`);
    lines.push(`Arguments: [${this.arguments.join(', ')}]`);
{{range $Index, $Option := $Command.Options}}
    lines.push(`{{$Option.InputFieldName}}: ${this.{{$Option.InputFieldName}}}`);
{{end}}
{{range $Index, $Argument := $Command.Arguments}}
    lines.push(`{{$Argument.InputFieldName}}: ${this.{{$Argument.InputFieldName}}}`);
{{end}}
    if (this.errorMessage) {
      lines.push(`Error: ${this.errorMessage}`);
    }
    return lines.join('\n');
  }

  /**
   * Resolves input from command-line arguments.
   * @param {(string[])} subcommand - The subcommand in command-line arguments.
   * @param {(string[])} options - The options in command-line arguments.
   * @param {(string[])} positionalArguments - The positionalArguments in command-line arguments.
   */
  resolveInput(subcommand: string[], options: string[], positionalArguments: string[]): void {
    this.subcommand = subcommand;
    this.options = options;
    this.arguments = positionalArguments;

    for (const arg of this.options) {
      const cut = arg.indexOf('=');
      let optName: string;
      let lit: string | undefined;

      if (cut >= 0) {
        optName = arg.substring(0, cut);
        lit = arg.substring(cut + 1);
      } else {
        optName = arg;
      }

      switch (optName) {
{{range $Index, $Option := $Command.Options}}
      case '{{$Option.Option}}':
  {{if $Option.ShortOption}}    case '{{$Option.ShortOption}}':{{end}}
        {
          if (cut < 0) {
  {{if or (eq $Option.InputFieldType "boolean") (eq $Option.InputFieldType "boolean[]") }}
            lit = 'true';
  {{else}}
            this.errorMessage = `Value is not specified to option "${optName}"`;
            return;
  {{end}}
          }
          let v: any;
          try {
            v = parseValue(lit!, '{{$Option.InputFieldType}}');
          } catch (e) {
            this.errorMessage = `Value "${lit}" is not assignable to option "${optName}"`;
            return;
          }
  {{if $Option.Repeated}}
          this.{{$Option.InputFieldName}} = [...this.{{$Option.InputFieldName}}, v[0]];
  {{else}}
          this.{{$Option.InputFieldName}} = v;
  {{end}}
        }
        break;
  {{if $Option.Negation}}
      case '-no{{$Option.Option}}':
        {
          if (cut < 0) {
            lit = 'true';
          }
          let v: any;
          try {
            v = parseValue(lit!, '{{$Option.InputFieldType}}');
          } catch (e) {
            this.errorMessage = `Value "${lit}" is not assignable to option "${optName}"`;
            return;
          }
    {{if $Option.Repeated}}
          this.{{$Option.InputFieldName}} = [...this.{{$Option.InputFieldName}}, !v[0]];
    {{else}}
          this.{{$Option.InputFieldName}} = !v;
    {{end}}
        }
        break;
  {{end}}
{{end}}
      default:
        this.errorMessage = `Unknown option "${optName}"`;
        return;
      }
    }

    const expectedArgs = {{len $Command.Arguments}};

{{range $Index, $Argument := .Arguments}}
  {{if $Argument.Variadic}}
    if (this.arguments.length < {{$Index}}) {
      this.errorMessage = `Too few arguments: required at least ${expectedArgs - 1}, got ${this.arguments.length}`;
      return;
    }
    try {
      this.{{$Argument.InputFieldName}} = this.arguments.slice({{$Index}}).map(s => parseValue(s, '{{$Argument.InputFieldType}}')).flat();
    } catch (e) {
      this.errorMessage = `Values [${this.arguments.slice({{$Index}}).join(' ')}] are not assignable to arguments at [{{$Index}}:]`;
      return;
    }
  {{else}}
    if (this.arguments.length <= {{$Index}}) {
      this.errorMessage = `Too few arguments: required ${expectedArgs}, got ${this.arguments.length}`;
      return;
    }
    try {
      this.{{$Argument.InputFieldName}} = parseValue(this.arguments[{{$Index}}], '{{$Argument.InputFieldType}}');
    } catch (e) {
      this.errorMessage = `Value "${this.arguments[{{$Index}}]}" is not assignable to argument at [{{$Index}}]`;
      return;
    }
  {{end}}
{{end}}
  }
}
{{end}}

/**
 * Resolves the subcommand from the arguments.
 * @param {(string[])} args - The command-line arguments.
 * @returns {([string[], string[]])} A tuple containing the subcommand path and remaining arguments.
 */
function resolveSubcommand(args: string[]): [string[], string[], string[]] {
  const subcommandSet: {[key: string]: boolean} = {
{{range .CommandList}}    {{.PathLiteral}}: true,
{{end}}
  };

  const subcommandPath: string[] = [];
  for (const arg of args) {
    if (arg === '--') {
      break;
    }
    const pathLiteral = [...subcommandPath, arg].join(' ');
    if (!subcommandSet[pathLiteral]) {
      break;
    }
    subcommandPath.push(arg);
  }

  const restArgs = args.slice(subcommandPath.length);
  const options: string[] = [];
  const positionalArguments: string[] = [];
  for (let idx = 0; idx < restArgs.length; idx++) {
    const arg = restArgs[idx];
    if (arg === '--') {
      positionalArguments.push(...restArgs.slice(idx + 1));
      break;
    }
    if (arg.startsWith('-')) {
      options.push(arg);
    } else {
      positionalArguments.push(arg);
    }
  }

  return [subcommandPath, options, positionalArguments];
}

/**
 * Parses a string value to the specified type.
 * @param {(string)} strValue - The string value to parse.
 * @param {(string)} typeName - The target type name.
 * @returns {(any)} The parsed value.
 */
function parseValue(strValue: string, typeName: string): any {
  switch (typeName) {
    case 'boolean[]':
      return [parseValue(strValue, 'boolean')];
    case 'number[]':
      return [parseValue(strValue, 'number')];
    case 'string[]':
      return [parseValue(strValue, 'string')];
    case 'boolean':
      if (['true', 't', '1'].includes(strValue.toLowerCase())) return true;
      if (['false', 'f', '0'].includes(strValue.toLowerCase())) return false;
      throw new Error(`Failed to parse "${strValue}" as boolean`);
    case 'number':
      const num = parseInt(strValue, 10);
      if (isNaN(num)) throw new Error(`Failed to parse "${strValue}" as number`);
      return num;
    case 'string':
      return strValue;
    default:
      throw new Error(`Unsupported type: ${typeName}`);
  }
}

/**
 * Returns the version of the program.
 * @returns {(string)} The program version.
 */
export function getVersion(): string {
  return '{{.Program.Version}}';
}

/**
 * Returns the program name.
 * @returns {(string)} The program name.
 */
export function getProgram(): string {
  return '{{.Program.Name}}';
}

/**
 * Gets documentation for a subcommand.
 * @param {(string[])} subcommands - The subcommand path.
 * @returns {(string)} The documentation text for the subcommand.
 */
export function getDoc(subcommands: string[]): string {
  switch (subcommands.join(' ')) {
{{range .CommandList}}
    case {{.PathLiteral}}:
      return {{.DocText}};
{{end}}
    default:
      throw new Error(`Invalid subcommands: ${subcommands}`);
  }
}
